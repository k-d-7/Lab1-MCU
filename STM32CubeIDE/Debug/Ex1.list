
Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b0  080026b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026b0  080026b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b0  080026b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002728  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002728  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006410  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154e  00000000  00000000  000264a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  000279f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00027ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001733f  00000000  00000000  000282b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056dc  00000000  00000000  0003f5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f096  00000000  00000000  00044ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3d61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a34  00000000  00000000  000c3db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800252c 	.word	0x0800252c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800252c 	.word	0x0800252c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fac9 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f847 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f881 	bl	8000260 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*Ex10*/
  int hour = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
  int min = 1;
 8000162:	2301      	movs	r3, #1
 8000164:	60bb      	str	r3, [r7, #8]
  int sec = 2;
 8000166:	2302      	movs	r3, #2
 8000168:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  hour = rand() % 12;
 800016a:	f001 f9d3 	bl	8001514 <rand>
 800016e:	4602      	mov	r2, r0
 8000170:	4b1c      	ldr	r3, [pc, #112]	; (80001e4 <main+0x98>)
 8000172:	fb83 1302 	smull	r1, r3, r3, r2
 8000176:	1059      	asrs	r1, r3, #1
 8000178:	17d3      	asrs	r3, r2, #31
 800017a:	1ac9      	subs	r1, r1, r3
 800017c:	460b      	mov	r3, r1
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	440b      	add	r3, r1
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	1ad3      	subs	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]
	  min = rand() % 12;
 8000188:	f001 f9c4 	bl	8001514 <rand>
 800018c:	4602      	mov	r2, r0
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0x98>)
 8000190:	fb83 1302 	smull	r1, r3, r3, r2
 8000194:	1059      	asrs	r1, r3, #1
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac9      	subs	r1, r1, r3
 800019a:	460b      	mov	r3, r1
 800019c:	005b      	lsls	r3, r3, #1
 800019e:	440b      	add	r3, r1
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	60bb      	str	r3, [r7, #8]
	  sec = rand() % 12;
 80001a6:	f001 f9b5 	bl	8001514 <rand>
 80001aa:	4602      	mov	r2, r0
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <main+0x98>)
 80001ae:	fb83 1302 	smull	r1, r3, r3, r2
 80001b2:	1059      	asrs	r1, r3, #1
 80001b4:	17d3      	asrs	r3, r2, #31
 80001b6:	1ac9      	subs	r1, r1, r3
 80001b8:	460b      	mov	r3, r1
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	440b      	add	r3, r1
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	607b      	str	r3, [r7, #4]
	  clearAllClock();
 80001c4:	f000 f880 	bl	80002c8 <clearAllClock>
	  setNumberOnClock(hour);
 80001c8:	68f8      	ldr	r0, [r7, #12]
 80001ca:	f000 f8c7 	bl	800035c <setNumberOnClock>
	  setNumberOnClock(min);
 80001ce:	68b8      	ldr	r0, [r7, #8]
 80001d0:	f000 f8c4 	bl	800035c <setNumberOnClock>
	  setNumberOnClock(sec);
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f8c1 	bl	800035c <setNumberOnClock>
	  HAL_Delay(2000);
 80001da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001de:	f000 fae5 	bl	80007ac <HAL_Delay>
	  hour = rand() % 12;
 80001e2:	e7c2      	b.n	800016a <main+0x1e>
 80001e4:	2aaaaaab 	.word	0x2aaaaaab

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	; 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 f984 	bl	8001504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fd5e 	bl	8000ce0 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022a:	f000 f911 	bl	8000450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f000 ffca 	bl	80011e0 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000252:	f000 f8fd 	bl	8000450 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_GPIO_Init+0x60>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <MX_GPIO_Init+0x60>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x60>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0304 	and.w	r3, r3, #4
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800028c:	2200      	movs	r2, #0
 800028e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <MX_GPIO_Init+0x64>)
 8000294:	f000 fd0c 	bl	8000cb0 <HAL_GPIO_WritePin>
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin
                           LED9_Pin LED10_Pin LED11_Pin LED12_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000298:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800029c:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_GPIO_Init+0x64>)
 80002b2:	f000 fb83 	bl	80009bc <HAL_GPIO_Init>

}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <clearAllClock>:

/* USER CODE BEGIN 4 */
void clearAllClock() {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2110      	movs	r1, #16
 80002d0:	4821      	ldr	r0, [pc, #132]	; (8000358 <clearAllClock+0x90>)
 80002d2:	f000 fced 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2120      	movs	r1, #32
 80002da:	481f      	ldr	r0, [pc, #124]	; (8000358 <clearAllClock+0x90>)
 80002dc:	f000 fce8 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	481c      	ldr	r0, [pc, #112]	; (8000358 <clearAllClock+0x90>)
 80002e6:	f000 fce3 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <clearAllClock+0x90>)
 80002f0:	f000 fcde 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fa:	4817      	ldr	r0, [pc, #92]	; (8000358 <clearAllClock+0x90>)
 80002fc:	f000 fcd8 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <clearAllClock+0x90>)
 8000308:	f000 fcd2 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <clearAllClock+0x90>)
 8000314:	f000 fccc 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <clearAllClock+0x90>)
 8000320:	f000 fcc6 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <clearAllClock+0x90>)
 800032c:	f000 fcc0 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, 1);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <clearAllClock+0x90>)
 8000338:	f000 fcba 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <clearAllClock+0x90>)
 8000344:	f000 fcb4 	bl	8000cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <clearAllClock+0x90>)
 8000350:	f000 fcae 	bl	8000cb0 <HAL_GPIO_WritePin>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40010800 	.word	0x40010800

0800035c <setNumberOnClock>:

void setNumberOnClock(int num) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b0b      	cmp	r3, #11
 8000368:	d86a      	bhi.n	8000440 <setNumberOnClock+0xe4>
 800036a:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <setNumberOnClock+0x14>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000435 	.word	0x08000435
 8000374:	08000429 	.word	0x08000429
 8000378:	0800041d 	.word	0x0800041d
 800037c:	08000411 	.word	0x08000411
 8000380:	08000403 	.word	0x08000403
 8000384:	080003f5 	.word	0x080003f5
 8000388:	080003e7 	.word	0x080003e7
 800038c:	080003d9 	.word	0x080003d9
 8000390:	080003cb 	.word	0x080003cb
 8000394:	080003bd 	.word	0x080003bd
 8000398:	080003af 	.word	0x080003af
 800039c:	080003a1 	.word	0x080003a1
	switch (num) {
	case 11:
		HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a6:	4829      	ldr	r0, [pc, #164]	; (800044c <setNumberOnClock+0xf0>)
 80003a8:	f000 fc82 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003ac:	e049      	b.n	8000442 <setNumberOnClock+0xe6>
	case 10:
		HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b4:	4825      	ldr	r0, [pc, #148]	; (800044c <setNumberOnClock+0xf0>)
 80003b6:	f000 fc7b 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003ba:	e042      	b.n	8000442 <setNumberOnClock+0xe6>
	case 9:
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c2:	4822      	ldr	r0, [pc, #136]	; (800044c <setNumberOnClock+0xf0>)
 80003c4:	f000 fc74 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003c8:	e03b      	b.n	8000442 <setNumberOnClock+0xe6>
	case 8:
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d0:	481e      	ldr	r0, [pc, #120]	; (800044c <setNumberOnClock+0xf0>)
 80003d2:	f000 fc6d 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003d6:	e034      	b.n	8000442 <setNumberOnClock+0xe6>
	case 7:
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003de:	481b      	ldr	r0, [pc, #108]	; (800044c <setNumberOnClock+0xf0>)
 80003e0:	f000 fc66 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003e4:	e02d      	b.n	8000442 <setNumberOnClock+0xe6>
	case 6:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ec:	4817      	ldr	r0, [pc, #92]	; (800044c <setNumberOnClock+0xf0>)
 80003ee:	f000 fc5f 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 80003f2:	e026      	b.n	8000442 <setNumberOnClock+0xe6>
	case 5:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <setNumberOnClock+0xf0>)
 80003fc:	f000 fc58 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 8000400:	e01f      	b.n	8000442 <setNumberOnClock+0xe6>
	case 4:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <setNumberOnClock+0xf0>)
 800040a:	f000 fc51 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 800040e:	e018      	b.n	8000442 <setNumberOnClock+0xe6>
	case 3:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <setNumberOnClock+0xf0>)
 8000416:	f000 fc4b 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 800041a:	e012      	b.n	8000442 <setNumberOnClock+0xe6>
	case 2:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	480a      	ldr	r0, [pc, #40]	; (800044c <setNumberOnClock+0xf0>)
 8000422:	f000 fc45 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 8000426:	e00c      	b.n	8000442 <setNumberOnClock+0xe6>
	case 1:
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2120      	movs	r1, #32
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <setNumberOnClock+0xf0>)
 800042e:	f000 fc3f 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 8000432:	e006      	b.n	8000442 <setNumberOnClock+0xe6>
	case 0:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2110      	movs	r1, #16
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <setNumberOnClock+0xf0>)
 800043a:	f000 fc39 	bl	8000cb0 <HAL_GPIO_WritePin>
		break;
 800043e:	e000      	b.n	8000442 <setNumberOnClock+0xe6>
	default:
		break;
 8000440:	bf00      	nop
   }
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000506:	f000 f935 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}

0800050e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
	return 1;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <_kill>:

int _kill(int pid, int sig)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000526:	f000 ffc3 	bl	80014b0 <__errno>
 800052a:	4603      	mov	r3, r0
 800052c:	2216      	movs	r2, #22
 800052e:	601a      	str	r2, [r3, #0]
	return -1;
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_exit>:

void _exit (int status)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ffe7 	bl	800051c <_kill>
	while (1) {}		/* Make sure we hang here */
 800054e:	e7fe      	b.n	800054e <_exit+0x12>

08000550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e00a      	b.n	8000578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000562:	f3af 8000 	nop.w
 8000566:	4601      	mov	r1, r0
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	b2ca      	uxtb	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf0      	blt.n	8000562 <_read+0x12>
	}

return len;
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e009      	b.n	80005b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf1      	blt.n	800059c <_write+0x12>
	}
	return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_close>:

int _close(int file)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e8:	605a      	str	r2, [r3, #4]
	return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <_isatty>:

int _isatty(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	return 1;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
	return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <_sbrk+0x5c>)
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <_sbrk+0x60>)
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <_sbrk+0x64>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <_sbrk+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	429a      	cmp	r2, r3
 8000652:	d207      	bcs.n	8000664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000654:	f000 ff2c 	bl	80014b0 <__errno>
 8000658:	4603      	mov	r3, r0
 800065a:	220c      	movs	r2, #12
 800065c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e009      	b.n	8000678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <_sbrk+0x64>)
 8000674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20002800 	.word	0x20002800
 8000684:	00000400 	.word	0x00000400
 8000688:	2000008c 	.word	0x2000008c
 800068c:	200000b0 	.word	0x200000b0

08000690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c2:	f7ff ffe5 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c6:	f000 fef9 	bl	80014bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fd3f 	bl	800014c <main>
  bx lr
 80006ce:	4770      	bx	lr
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006d8:	080026b8 	.word	0x080026b8
  ldr r2, =_sbss
 80006dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e0:	200000ac 	.word	0x200000ac

080006e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x28>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 f92b 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	200f      	movs	r0, #15
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff feaa 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f935 	bl	80009a2 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f90b 	bl	800096a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000008 	.word	0x20000008
 8000794:	20000098 	.word	0x20000098

08000798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000098 	.word	0x20000098

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff fff0 	bl	8000798 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffe0 	bl	8000798 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008

080007f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <__NVIC_SetPriorityGrouping+0x44>)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_GetPriorityGrouping+0x18>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	f003 0307 	and.w	r3, r3, #7
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0a      	blt.n	8000882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	490c      	ldr	r1, [pc, #48]	; (80008a4 <__NVIC_SetPriority+0x4c>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000880:	e00a      	b.n	8000898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4908      	ldr	r1, [pc, #32]	; (80008a8 <__NVIC_SetPriority+0x50>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	3b04      	subs	r3, #4
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	440b      	add	r3, r1
 8000896:	761a      	strb	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f1c3 0307 	rsb	r3, r3, #7
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	bf28      	it	cs
 80008ca:	2304      	movcs	r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3304      	adds	r3, #4
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d902      	bls.n	80008dc <NVIC_EncodePriority+0x30>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b03      	subs	r3, #3
 80008da:	e000      	b.n	80008de <NVIC_EncodePriority+0x32>
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43da      	mvns	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	401a      	ands	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	4313      	orrs	r3, r2
         );
}
 8000906:	4618      	mov	r0, r3
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ff90 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff49 	bl	80007f4 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff5e 	bl	800083c <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff90 	bl	80008ac <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff5f 	bl	8000858 <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffb0 	bl	8000910 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e148      	b.n	8000c62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8137 	bne.w	8000c5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4aa3      	ldr	r2, [pc, #652]	; (8000c80 <HAL_GPIO_Init+0x2c4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d05e      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 80009f8:	4aa1      	ldr	r2, [pc, #644]	; (8000c80 <HAL_GPIO_Init+0x2c4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d875      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 80009fe:	4aa1      	ldr	r2, [pc, #644]	; (8000c84 <HAL_GPIO_Init+0x2c8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d058      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a04:	4a9f      	ldr	r2, [pc, #636]	; (8000c84 <HAL_GPIO_Init+0x2c8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d86f      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a0a:	4a9f      	ldr	r2, [pc, #636]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d052      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a10:	4a9d      	ldr	r2, [pc, #628]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d869      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a16:	4a9d      	ldr	r2, [pc, #628]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d04c      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a9b      	ldr	r2, [pc, #620]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d863      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a22:	4a9b      	ldr	r2, [pc, #620]	; (8000c90 <HAL_GPIO_Init+0x2d4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d046      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a99      	ldr	r2, [pc, #612]	; (8000c90 <HAL_GPIO_Init+0x2d4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d85d      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d82a      	bhi.n	8000a88 <HAL_GPIO_Init+0xcc>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d859      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <HAL_GPIO_Init+0x80>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000aa3 	.word	0x08000aa3
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000aeb 	.word	0x08000aeb
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000aeb 	.word	0x08000aeb
 8000a5c:	08000aeb 	.word	0x08000aeb
 8000a60:	08000aeb 	.word	0x08000aeb
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000aeb 	.word	0x08000aeb
 8000a78:	08000aeb 	.word	0x08000aeb
 8000a7c:	08000aeb 	.word	0x08000aeb
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	4a82      	ldr	r2, [pc, #520]	; (8000c94 <HAL_GPIO_Init+0x2d8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e02c      	b.n	8000aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e029      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e024      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e01f      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e01a      	b.n	8000aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e013      	b.n	8000aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	611a      	str	r2, [r3, #16]
          break;
 8000ad6:	e009      	b.n	8000aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	615a      	str	r2, [r3, #20]
          break;
 8000ae2:	e003      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x130>
          break;
 8000aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d801      	bhi.n	8000af6 <HAL_GPIO_Init+0x13a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d802      	bhi.n	8000b08 <HAL_GPIO_Init+0x14c>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x152>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	3b08      	subs	r3, #8
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	210f      	movs	r1, #15
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6a39      	ldr	r1, [r7, #32]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 8090 	beq.w	8000c5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3c:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <HAL_GPIO_Init+0x2dc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a55      	ldr	r2, [pc, #340]	; (8000c98 <HAL_GPIO_Init+0x2dc>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <HAL_GPIO_Init+0x2dc>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b54:	4a51      	ldr	r2, [pc, #324]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a49      	ldr	r2, [pc, #292]	; (8000ca0 <HAL_GPIO_Init+0x2e4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a48      	ldr	r2, [pc, #288]	; (8000ca4 <HAL_GPIO_Init+0x2e8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x1dc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <HAL_GPIO_Init+0x2ec>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_GPIO_Init+0x1d8>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bae:	493b      	ldr	r1, [pc, #236]	; (8000c9c <HAL_GPIO_Init+0x2e0>)
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b38      	ldr	r3, [pc, #224]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4937      	ldr	r1, [pc, #220]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4933      	ldr	r1, [pc, #204]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	492d      	ldr	r1, [pc, #180]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4929      	ldr	r1, [pc, #164]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	4923      	ldr	r1, [pc, #140]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	608b      	str	r3, [r1, #8]
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	491f      	ldr	r1, [pc, #124]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	4919      	ldr	r1, [pc, #100]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60cb      	str	r3, [r1, #12]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4915      	ldr	r1, [pc, #84]	; (8000cac <HAL_GPIO_Init+0x2f0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3301      	adds	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aeaf 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	372c      	adds	r7, #44	; 0x2c
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	10320000 	.word	0x10320000
 8000c84:	10310000 	.word	0x10310000
 8000c88:	10220000 	.word	0x10220000
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	10120000 	.word	0x10120000
 8000c94:	10110000 	.word	0x10110000
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ccc:	e003      	b.n	8000cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	041a      	lsls	r2, r3, #16
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	611a      	str	r2, [r3, #16]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e26c      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8087 	beq.w	8000e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d00:	4b92      	ldr	r3, [pc, #584]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d00c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0c:	4b8f      	ldr	r3, [pc, #572]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d112      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5e>
 8000d18:	4b8c      	ldr	r3, [pc, #560]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d10b      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	4b89      	ldr	r3, [pc, #548]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06c      	beq.n	8000e0c <HAL_RCC_OscConfig+0x12c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d168      	bne.n	8000e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e246      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d46:	d106      	bne.n	8000d56 <HAL_RCC_OscConfig+0x76>
 8000d48:	4b80      	ldr	r3, [pc, #512]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a7f      	ldr	r2, [pc, #508]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e02e      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x98>
 8000d5e:	4b7b      	ldr	r3, [pc, #492]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7a      	ldr	r2, [pc, #488]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a77      	ldr	r2, [pc, #476]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e01d      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d80:	d10c      	bne.n	8000d9c <HAL_RCC_OscConfig+0xbc>
 8000d82:	4b72      	ldr	r3, [pc, #456]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a71      	ldr	r2, [pc, #452]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4b6f      	ldr	r3, [pc, #444]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a6e      	ldr	r2, [pc, #440]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e00b      	b.n	8000db4 <HAL_RCC_OscConfig+0xd4>
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a6a      	ldr	r2, [pc, #424]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b68      	ldr	r3, [pc, #416]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a67      	ldr	r2, [pc, #412]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d013      	beq.n	8000de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fcec 	bl	8000798 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fce8 	bl	8000798 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1fa      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0xe4>
 8000de2:	e014      	b.n	8000e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fcd8 	bl	8000798 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fcd4 	bl	8000798 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e1e6      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x10c>
 8000e0a:	e000      	b.n	8000e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d063      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00b      	beq.n	8000e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e26:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d11c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x18c>
 8000e32:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d116      	bne.n	8000e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x176>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e1ba      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4939      	ldr	r1, [pc, #228]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6a:	e03a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d020      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e74:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fc8d 	bl	8000798 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e82:	f7ff fc89 	bl	8000798 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e19b      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4927      	ldr	r1, [pc, #156]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	600b      	str	r3, [r1, #0]
 8000eb4:	e015      	b.n	8000ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fc6c 	bl	8000798 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc68 	bl	8000798 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e17a      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d03a      	beq.n	8000f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d019      	beq.n	8000f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc4c 	bl	8000798 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc48 	bl	8000798 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e15a      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f0      	beq.n	8000f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 faa6 	bl	8001474 <RCC_Delay>
 8000f28:	e01c      	b.n	8000f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fc32 	bl	8000798 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f36:	e00f      	b.n	8000f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc2e 	bl	8000798 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d908      	bls.n	8000f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e140      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	42420000 	.word	0x42420000
 8000f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f58:	4b9e      	ldr	r3, [pc, #632]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e9      	bne.n	8000f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a6 	beq.w	80010be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f76:	4b97      	ldr	r3, [pc, #604]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b94      	ldr	r3, [pc, #592]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a93      	ldr	r2, [pc, #588]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b91      	ldr	r3, [pc, #580]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b8e      	ldr	r3, [pc, #568]	; (80011d8 <HAL_RCC_OscConfig+0x4f8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x4f8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a8a      	ldr	r2, [pc, #552]	; (80011d8 <HAL_RCC_OscConfig+0x4f8>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fbef 	bl	8000798 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fbe:	f7ff fbeb 	bl	8000798 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	; 0x64
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e0fd      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <HAL_RCC_OscConfig+0x4f8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x312>
 8000fe4:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4a7a      	ldr	r2, [pc, #488]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6213      	str	r3, [r2, #32]
 8000ff0:	e02d      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x334>
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a75      	ldr	r2, [pc, #468]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	4b73      	ldr	r3, [pc, #460]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a72      	ldr	r2, [pc, #456]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	6213      	str	r3, [r2, #32]
 8001012:	e01c      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d10c      	bne.n	8001036 <HAL_RCC_OscConfig+0x356>
 800101c:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a69      	ldr	r2, [pc, #420]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	e00b      	b.n	800104e <HAL_RCC_OscConfig+0x36e>
 8001036:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a66      	ldr	r2, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d015      	beq.n	8001082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb9f 	bl	8000798 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff fb9b 	bl	8000798 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	; 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e0ab      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0ee      	beq.n	800105e <HAL_RCC_OscConfig+0x37e>
 8001080:	e014      	b.n	80010ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001082:	f7ff fb89 	bl	8000798 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108a:	f7ff fb85 	bl	8000798 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f241 3288 	movw	r2, #5000	; 0x1388
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e095      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1ee      	bne.n	800108a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d105      	bne.n	80010be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b2:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8081 	beq.w	80011ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d061      	beq.n	8001198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d146      	bne.n	800116a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_RCC_OscConfig+0x4fc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb59 	bl	8000798 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fb55 	bl	8000798 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e067      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d108      	bne.n	8001124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	492d      	ldr	r1, [pc, #180]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a19      	ldr	r1, [r3, #32]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	430b      	orrs	r3, r1
 8001136:	4927      	ldr	r1, [pc, #156]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_RCC_OscConfig+0x4fc>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fb29 	bl	8000798 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fb25 	bl	8000798 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e037      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x46a>
 8001168:	e02f      	b.n	80011ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_RCC_OscConfig+0x4fc>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fb12 	bl	8000798 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff fb0e 	bl	8000798 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e020      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x498>
 8001196:	e018      	b.n	80011ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e013      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40007000 	.word	0x40007000
 80011dc:	42420060 	.word	0x42420060

080011e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e0d0      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f4:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d910      	bls.n	8001224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 0207 	bic.w	r2, r3, #7
 800120a:	4965      	ldr	r1, [pc, #404]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0b8      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800123c:	4b59      	ldr	r3, [pc, #356]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800125e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001260:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	494d      	ldr	r1, [pc, #308]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d040      	beq.n	8001300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d115      	bne.n	80012be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e07f      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d107      	bne.n	80012ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e073      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e06b      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f023 0203 	bic.w	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4936      	ldr	r1, [pc, #216]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d0:	f7ff fa62 	bl	8000798 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	e00a      	b.n	80012ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f7ff fa5e 	bl	8000798 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e053      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 020c 	and.w	r2, r3, #12
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d1eb      	bne.n	80012d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d210      	bcs.n	8001330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 0207 	bic.w	r2, r3, #7
 8001316:	4922      	ldr	r1, [pc, #136]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e032      	b.n	8001396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4916      	ldr	r1, [pc, #88]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	490e      	ldr	r1, [pc, #56]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800136e:	f000 f821 	bl	80013b4 <HAL_RCC_GetSysClockFreq>
 8001372:	4602      	mov	r2, r0
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001380:	5ccb      	ldrb	r3, [r1, r3]
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1cc>)
 8001388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_RCC_ClockConfig+0x1d0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f9c0 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	08002554 	.word	0x08002554
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b4:	b490      	push	{r4, r7}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013bc:	1d3c      	adds	r4, r7, #4
 80013be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013c4:	f240 2301 	movw	r3, #513	; 0x201
 80013c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x40>
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d003      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0x46>
 80013f2:	e02d      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f6:	623b      	str	r3, [r7, #32]
      break;
 80013f8:	e02d      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001406:	4413      	add	r3, r2
 8001408:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800140c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_RCC_GetSysClockFreq+0xb4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	0c5b      	lsrs	r3, r3, #17
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001426:	4413      	add	r3, r2
 8001428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800142c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001432:	fb02 f203 	mul.w	r2, r2, r3
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	e004      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	623b      	str	r3, [r7, #32]
      break;
 800144e:	e002      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001452:	623b      	str	r3, [r7, #32]
      break;
 8001454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001456:	6a3b      	ldr	r3, [r7, #32]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bc90      	pop	{r4, r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	08002544 	.word	0x08002544
 8001468:	40021000 	.word	0x40021000
 800146c:	007a1200 	.word	0x007a1200
 8001470:	003d0900 	.word	0x003d0900

08001474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <RCC_Delay+0x34>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <RCC_Delay+0x38>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a5b      	lsrs	r3, r3, #9
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001490:	bf00      	nop
  }
  while (Delay --);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	60fa      	str	r2, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <RCC_Delay+0x1c>
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000
 80014ac:	10624dd3 	.word	0x10624dd3

080014b0 <__errno>:
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <__errno+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000000c 	.word	0x2000000c

080014bc <__libc_init_array>:
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	2600      	movs	r6, #0
 80014c0:	4d0c      	ldr	r5, [pc, #48]	; (80014f4 <__libc_init_array+0x38>)
 80014c2:	4c0d      	ldr	r4, [pc, #52]	; (80014f8 <__libc_init_array+0x3c>)
 80014c4:	1b64      	subs	r4, r4, r5
 80014c6:	10a4      	asrs	r4, r4, #2
 80014c8:	42a6      	cmp	r6, r4
 80014ca:	d109      	bne.n	80014e0 <__libc_init_array+0x24>
 80014cc:	f001 f82e 	bl	800252c <_init>
 80014d0:	2600      	movs	r6, #0
 80014d2:	4d0a      	ldr	r5, [pc, #40]	; (80014fc <__libc_init_array+0x40>)
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <__libc_init_array+0x44>)
 80014d6:	1b64      	subs	r4, r4, r5
 80014d8:	10a4      	asrs	r4, r4, #2
 80014da:	42a6      	cmp	r6, r4
 80014dc:	d105      	bne.n	80014ea <__libc_init_array+0x2e>
 80014de:	bd70      	pop	{r4, r5, r6, pc}
 80014e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e4:	4798      	blx	r3
 80014e6:	3601      	adds	r6, #1
 80014e8:	e7ee      	b.n	80014c8 <__libc_init_array+0xc>
 80014ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ee:	4798      	blx	r3
 80014f0:	3601      	adds	r6, #1
 80014f2:	e7f2      	b.n	80014da <__libc_init_array+0x1e>
 80014f4:	080026b0 	.word	0x080026b0
 80014f8:	080026b0 	.word	0x080026b0
 80014fc:	080026b0 	.word	0x080026b0
 8001500:	080026b4 	.word	0x080026b4

08001504 <memset>:
 8001504:	4603      	mov	r3, r0
 8001506:	4402      	add	r2, r0
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <memset+0xa>
 800150c:	4770      	bx	lr
 800150e:	f803 1b01 	strb.w	r1, [r3], #1
 8001512:	e7f9      	b.n	8001508 <memset+0x4>

08001514 <rand>:
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <rand+0x60>)
 8001516:	b510      	push	{r4, lr}
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800151c:	b9b3      	cbnz	r3, 800154c <rand+0x38>
 800151e:	2018      	movs	r0, #24
 8001520:	f000 f868 	bl	80015f4 <malloc>
 8001524:	4602      	mov	r2, r0
 8001526:	63a0      	str	r0, [r4, #56]	; 0x38
 8001528:	b920      	cbnz	r0, 8001534 <rand+0x20>
 800152a:	214e      	movs	r1, #78	; 0x4e
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <rand+0x64>)
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <rand+0x68>)
 8001530:	f000 f830 	bl	8001594 <__assert_func>
 8001534:	4912      	ldr	r1, [pc, #72]	; (8001580 <rand+0x6c>)
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <rand+0x70>)
 8001538:	e9c0 1300 	strd	r1, r3, [r0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <rand+0x74>)
 800153e:	2100      	movs	r1, #0
 8001540:	6083      	str	r3, [r0, #8]
 8001542:	230b      	movs	r3, #11
 8001544:	8183      	strh	r3, [r0, #12]
 8001546:	2001      	movs	r0, #1
 8001548:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800154c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <rand+0x78>)
 8001550:	690a      	ldr	r2, [r1, #16]
 8001552:	694b      	ldr	r3, [r1, #20]
 8001554:	4350      	muls	r0, r2
 8001556:	4c0e      	ldr	r4, [pc, #56]	; (8001590 <rand+0x7c>)
 8001558:	fb04 0003 	mla	r0, r4, r3, r0
 800155c:	fba2 3404 	umull	r3, r4, r2, r4
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4404      	add	r4, r0
 8001564:	f144 0000 	adc.w	r0, r4, #0
 8001568:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800156c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001570:	bd10      	pop	{r4, pc}
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c
 8001578:	08002568 	.word	0x08002568
 800157c:	0800257f 	.word	0x0800257f
 8001580:	abcd330e 	.word	0xabcd330e
 8001584:	e66d1234 	.word	0xe66d1234
 8001588:	0005deec 	.word	0x0005deec
 800158c:	5851f42d 	.word	0x5851f42d
 8001590:	4c957f2d 	.word	0x4c957f2d

08001594 <__assert_func>:
 8001594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001596:	4614      	mov	r4, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <__assert_func+0x2c>)
 800159c:	4605      	mov	r5, r0
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d8      	ldr	r0, [r3, #12]
 80015a2:	b14c      	cbz	r4, 80015b8 <__assert_func+0x24>
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <__assert_func+0x30>)
 80015a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015aa:	9100      	str	r1, [sp, #0]
 80015ac:	462b      	mov	r3, r5
 80015ae:	4906      	ldr	r1, [pc, #24]	; (80015c8 <__assert_func+0x34>)
 80015b0:	f000 f80e 	bl	80015d0 <fiprintf>
 80015b4:	f000 fc8a 	bl	8001ecc <abort>
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__assert_func+0x38>)
 80015ba:	461c      	mov	r4, r3
 80015bc:	e7f3      	b.n	80015a6 <__assert_func+0x12>
 80015be:	bf00      	nop
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	080025de 	.word	0x080025de
 80015c8:	080025eb 	.word	0x080025eb
 80015cc:	08002619 	.word	0x08002619

080015d0 <fiprintf>:
 80015d0:	b40e      	push	{r1, r2, r3}
 80015d2:	b503      	push	{r0, r1, lr}
 80015d4:	4601      	mov	r1, r0
 80015d6:	ab03      	add	r3, sp, #12
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <fiprintf+0x20>)
 80015da:	f853 2b04 	ldr.w	r2, [r3], #4
 80015de:	6800      	ldr	r0, [r0, #0]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f000 f8dd 	bl	80017a0 <_vfiprintf_r>
 80015e6:	b002      	add	sp, #8
 80015e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80015ec:	b003      	add	sp, #12
 80015ee:	4770      	bx	lr
 80015f0:	2000000c 	.word	0x2000000c

080015f4 <malloc>:
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <malloc+0xc>)
 80015f6:	4601      	mov	r1, r0
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f000 b84f 	b.w	800169c <_malloc_r>
 80015fe:	bf00      	nop
 8001600:	2000000c 	.word	0x2000000c

08001604 <_free_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4605      	mov	r5, r0
 8001608:	2900      	cmp	r1, #0
 800160a:	d043      	beq.n	8001694 <_free_r+0x90>
 800160c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001610:	1f0c      	subs	r4, r1, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfb8      	it	lt
 8001616:	18e4      	addlt	r4, r4, r3
 8001618:	f000 fe8c 	bl	8002334 <__malloc_lock>
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <_free_r+0x94>)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	4610      	mov	r0, r2
 8001622:	b933      	cbnz	r3, 8001632 <_free_r+0x2e>
 8001624:	6063      	str	r3, [r4, #4]
 8001626:	6014      	str	r4, [r2, #0]
 8001628:	4628      	mov	r0, r5
 800162a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800162e:	f000 be87 	b.w	8002340 <__malloc_unlock>
 8001632:	42a3      	cmp	r3, r4
 8001634:	d90a      	bls.n	800164c <_free_r+0x48>
 8001636:	6821      	ldr	r1, [r4, #0]
 8001638:	1862      	adds	r2, r4, r1
 800163a:	4293      	cmp	r3, r2
 800163c:	bf01      	itttt	eq
 800163e:	681a      	ldreq	r2, [r3, #0]
 8001640:	685b      	ldreq	r3, [r3, #4]
 8001642:	1852      	addeq	r2, r2, r1
 8001644:	6022      	streq	r2, [r4, #0]
 8001646:	6063      	str	r3, [r4, #4]
 8001648:	6004      	str	r4, [r0, #0]
 800164a:	e7ed      	b.n	8001628 <_free_r+0x24>
 800164c:	461a      	mov	r2, r3
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	b10b      	cbz	r3, 8001656 <_free_r+0x52>
 8001652:	42a3      	cmp	r3, r4
 8001654:	d9fa      	bls.n	800164c <_free_r+0x48>
 8001656:	6811      	ldr	r1, [r2, #0]
 8001658:	1850      	adds	r0, r2, r1
 800165a:	42a0      	cmp	r0, r4
 800165c:	d10b      	bne.n	8001676 <_free_r+0x72>
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	4401      	add	r1, r0
 8001662:	1850      	adds	r0, r2, r1
 8001664:	4283      	cmp	r3, r0
 8001666:	6011      	str	r1, [r2, #0]
 8001668:	d1de      	bne.n	8001628 <_free_r+0x24>
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4401      	add	r1, r0
 8001670:	6011      	str	r1, [r2, #0]
 8001672:	6053      	str	r3, [r2, #4]
 8001674:	e7d8      	b.n	8001628 <_free_r+0x24>
 8001676:	d902      	bls.n	800167e <_free_r+0x7a>
 8001678:	230c      	movs	r3, #12
 800167a:	602b      	str	r3, [r5, #0]
 800167c:	e7d4      	b.n	8001628 <_free_r+0x24>
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	1821      	adds	r1, r4, r0
 8001682:	428b      	cmp	r3, r1
 8001684:	bf01      	itttt	eq
 8001686:	6819      	ldreq	r1, [r3, #0]
 8001688:	685b      	ldreq	r3, [r3, #4]
 800168a:	1809      	addeq	r1, r1, r0
 800168c:	6021      	streq	r1, [r4, #0]
 800168e:	6063      	str	r3, [r4, #4]
 8001690:	6054      	str	r4, [r2, #4]
 8001692:	e7c9      	b.n	8001628 <_free_r+0x24>
 8001694:	bd38      	pop	{r3, r4, r5, pc}
 8001696:	bf00      	nop
 8001698:	20000090 	.word	0x20000090

0800169c <_malloc_r>:
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169e:	1ccd      	adds	r5, r1, #3
 80016a0:	f025 0503 	bic.w	r5, r5, #3
 80016a4:	3508      	adds	r5, #8
 80016a6:	2d0c      	cmp	r5, #12
 80016a8:	bf38      	it	cc
 80016aa:	250c      	movcc	r5, #12
 80016ac:	2d00      	cmp	r5, #0
 80016ae:	4606      	mov	r6, r0
 80016b0:	db01      	blt.n	80016b6 <_malloc_r+0x1a>
 80016b2:	42a9      	cmp	r1, r5
 80016b4:	d903      	bls.n	80016be <_malloc_r+0x22>
 80016b6:	230c      	movs	r3, #12
 80016b8:	6033      	str	r3, [r6, #0]
 80016ba:	2000      	movs	r0, #0
 80016bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016be:	f000 fe39 	bl	8002334 <__malloc_lock>
 80016c2:	4921      	ldr	r1, [pc, #132]	; (8001748 <_malloc_r+0xac>)
 80016c4:	680a      	ldr	r2, [r1, #0]
 80016c6:	4614      	mov	r4, r2
 80016c8:	b99c      	cbnz	r4, 80016f2 <_malloc_r+0x56>
 80016ca:	4f20      	ldr	r7, [pc, #128]	; (800174c <_malloc_r+0xb0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b923      	cbnz	r3, 80016da <_malloc_r+0x3e>
 80016d0:	4621      	mov	r1, r4
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 fb2a 	bl	8001d2c <_sbrk_r>
 80016d8:	6038      	str	r0, [r7, #0]
 80016da:	4629      	mov	r1, r5
 80016dc:	4630      	mov	r0, r6
 80016de:	f000 fb25 	bl	8001d2c <_sbrk_r>
 80016e2:	1c43      	adds	r3, r0, #1
 80016e4:	d123      	bne.n	800172e <_malloc_r+0x92>
 80016e6:	230c      	movs	r3, #12
 80016e8:	4630      	mov	r0, r6
 80016ea:	6033      	str	r3, [r6, #0]
 80016ec:	f000 fe28 	bl	8002340 <__malloc_unlock>
 80016f0:	e7e3      	b.n	80016ba <_malloc_r+0x1e>
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	1b5b      	subs	r3, r3, r5
 80016f6:	d417      	bmi.n	8001728 <_malloc_r+0x8c>
 80016f8:	2b0b      	cmp	r3, #11
 80016fa:	d903      	bls.n	8001704 <_malloc_r+0x68>
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	441c      	add	r4, r3
 8001700:	6025      	str	r5, [r4, #0]
 8001702:	e004      	b.n	800170e <_malloc_r+0x72>
 8001704:	6863      	ldr	r3, [r4, #4]
 8001706:	42a2      	cmp	r2, r4
 8001708:	bf0c      	ite	eq
 800170a:	600b      	streq	r3, [r1, #0]
 800170c:	6053      	strne	r3, [r2, #4]
 800170e:	4630      	mov	r0, r6
 8001710:	f000 fe16 	bl	8002340 <__malloc_unlock>
 8001714:	f104 000b 	add.w	r0, r4, #11
 8001718:	1d23      	adds	r3, r4, #4
 800171a:	f020 0007 	bic.w	r0, r0, #7
 800171e:	1ac2      	subs	r2, r0, r3
 8001720:	d0cc      	beq.n	80016bc <_malloc_r+0x20>
 8001722:	1a1b      	subs	r3, r3, r0
 8001724:	50a3      	str	r3, [r4, r2]
 8001726:	e7c9      	b.n	80016bc <_malloc_r+0x20>
 8001728:	4622      	mov	r2, r4
 800172a:	6864      	ldr	r4, [r4, #4]
 800172c:	e7cc      	b.n	80016c8 <_malloc_r+0x2c>
 800172e:	1cc4      	adds	r4, r0, #3
 8001730:	f024 0403 	bic.w	r4, r4, #3
 8001734:	42a0      	cmp	r0, r4
 8001736:	d0e3      	beq.n	8001700 <_malloc_r+0x64>
 8001738:	1a21      	subs	r1, r4, r0
 800173a:	4630      	mov	r0, r6
 800173c:	f000 faf6 	bl	8001d2c <_sbrk_r>
 8001740:	3001      	adds	r0, #1
 8001742:	d1dd      	bne.n	8001700 <_malloc_r+0x64>
 8001744:	e7cf      	b.n	80016e6 <_malloc_r+0x4a>
 8001746:	bf00      	nop
 8001748:	20000090 	.word	0x20000090
 800174c:	20000094 	.word	0x20000094

08001750 <__sfputc_r>:
 8001750:	6893      	ldr	r3, [r2, #8]
 8001752:	b410      	push	{r4}
 8001754:	3b01      	subs	r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	6093      	str	r3, [r2, #8]
 800175a:	da07      	bge.n	800176c <__sfputc_r+0x1c>
 800175c:	6994      	ldr	r4, [r2, #24]
 800175e:	42a3      	cmp	r3, r4
 8001760:	db01      	blt.n	8001766 <__sfputc_r+0x16>
 8001762:	290a      	cmp	r1, #10
 8001764:	d102      	bne.n	800176c <__sfputc_r+0x1c>
 8001766:	bc10      	pop	{r4}
 8001768:	f000 baf0 	b.w	8001d4c <__swbuf_r>
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	1c58      	adds	r0, r3, #1
 8001770:	6010      	str	r0, [r2, #0]
 8001772:	7019      	strb	r1, [r3, #0]
 8001774:	4608      	mov	r0, r1
 8001776:	bc10      	pop	{r4}
 8001778:	4770      	bx	lr

0800177a <__sfputs_r>:
 800177a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177c:	4606      	mov	r6, r0
 800177e:	460f      	mov	r7, r1
 8001780:	4614      	mov	r4, r2
 8001782:	18d5      	adds	r5, r2, r3
 8001784:	42ac      	cmp	r4, r5
 8001786:	d101      	bne.n	800178c <__sfputs_r+0x12>
 8001788:	2000      	movs	r0, #0
 800178a:	e007      	b.n	800179c <__sfputs_r+0x22>
 800178c:	463a      	mov	r2, r7
 800178e:	4630      	mov	r0, r6
 8001790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001794:	f7ff ffdc 	bl	8001750 <__sfputc_r>
 8001798:	1c43      	adds	r3, r0, #1
 800179a:	d1f3      	bne.n	8001784 <__sfputs_r+0xa>
 800179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017a0 <_vfiprintf_r>:
 80017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a4:	460d      	mov	r5, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	4698      	mov	r8, r3
 80017aa:	4606      	mov	r6, r0
 80017ac:	b09d      	sub	sp, #116	; 0x74
 80017ae:	b118      	cbz	r0, 80017b8 <_vfiprintf_r+0x18>
 80017b0:	6983      	ldr	r3, [r0, #24]
 80017b2:	b90b      	cbnz	r3, 80017b8 <_vfiprintf_r+0x18>
 80017b4:	f000 fcac 	bl	8002110 <__sinit>
 80017b8:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <_vfiprintf_r+0x240>)
 80017ba:	429d      	cmp	r5, r3
 80017bc:	d11b      	bne.n	80017f6 <_vfiprintf_r+0x56>
 80017be:	6875      	ldr	r5, [r6, #4]
 80017c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017c2:	07d9      	lsls	r1, r3, #31
 80017c4:	d405      	bmi.n	80017d2 <_vfiprintf_r+0x32>
 80017c6:	89ab      	ldrh	r3, [r5, #12]
 80017c8:	059a      	lsls	r2, r3, #22
 80017ca:	d402      	bmi.n	80017d2 <_vfiprintf_r+0x32>
 80017cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017ce:	f000 fd3d 	bl	800224c <__retarget_lock_acquire_recursive>
 80017d2:	89ab      	ldrh	r3, [r5, #12]
 80017d4:	071b      	lsls	r3, r3, #28
 80017d6:	d501      	bpl.n	80017dc <_vfiprintf_r+0x3c>
 80017d8:	692b      	ldr	r3, [r5, #16]
 80017da:	b9eb      	cbnz	r3, 8001818 <_vfiprintf_r+0x78>
 80017dc:	4629      	mov	r1, r5
 80017de:	4630      	mov	r0, r6
 80017e0:	f000 fb06 	bl	8001df0 <__swsetup_r>
 80017e4:	b1c0      	cbz	r0, 8001818 <_vfiprintf_r+0x78>
 80017e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017e8:	07dc      	lsls	r4, r3, #31
 80017ea:	d50e      	bpl.n	800180a <_vfiprintf_r+0x6a>
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	b01d      	add	sp, #116	; 0x74
 80017f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017f6:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <_vfiprintf_r+0x244>)
 80017f8:	429d      	cmp	r5, r3
 80017fa:	d101      	bne.n	8001800 <_vfiprintf_r+0x60>
 80017fc:	68b5      	ldr	r5, [r6, #8]
 80017fe:	e7df      	b.n	80017c0 <_vfiprintf_r+0x20>
 8001800:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <_vfiprintf_r+0x248>)
 8001802:	429d      	cmp	r5, r3
 8001804:	bf08      	it	eq
 8001806:	68f5      	ldreq	r5, [r6, #12]
 8001808:	e7da      	b.n	80017c0 <_vfiprintf_r+0x20>
 800180a:	89ab      	ldrh	r3, [r5, #12]
 800180c:	0598      	lsls	r0, r3, #22
 800180e:	d4ed      	bmi.n	80017ec <_vfiprintf_r+0x4c>
 8001810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001812:	f000 fd1c 	bl	800224e <__retarget_lock_release_recursive>
 8001816:	e7e9      	b.n	80017ec <_vfiprintf_r+0x4c>
 8001818:	2300      	movs	r3, #0
 800181a:	9309      	str	r3, [sp, #36]	; 0x24
 800181c:	2320      	movs	r3, #32
 800181e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001822:	2330      	movs	r3, #48	; 0x30
 8001824:	f04f 0901 	mov.w	r9, #1
 8001828:	f8cd 800c 	str.w	r8, [sp, #12]
 800182c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80019ec <_vfiprintf_r+0x24c>
 8001830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001834:	4623      	mov	r3, r4
 8001836:	469a      	mov	sl, r3
 8001838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800183c:	b10a      	cbz	r2, 8001842 <_vfiprintf_r+0xa2>
 800183e:	2a25      	cmp	r2, #37	; 0x25
 8001840:	d1f9      	bne.n	8001836 <_vfiprintf_r+0x96>
 8001842:	ebba 0b04 	subs.w	fp, sl, r4
 8001846:	d00b      	beq.n	8001860 <_vfiprintf_r+0xc0>
 8001848:	465b      	mov	r3, fp
 800184a:	4622      	mov	r2, r4
 800184c:	4629      	mov	r1, r5
 800184e:	4630      	mov	r0, r6
 8001850:	f7ff ff93 	bl	800177a <__sfputs_r>
 8001854:	3001      	adds	r0, #1
 8001856:	f000 80aa 	beq.w	80019ae <_vfiprintf_r+0x20e>
 800185a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800185c:	445a      	add	r2, fp
 800185e:	9209      	str	r2, [sp, #36]	; 0x24
 8001860:	f89a 3000 	ldrb.w	r3, [sl]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a2 	beq.w	80019ae <_vfiprintf_r+0x20e>
 800186a:	2300      	movs	r3, #0
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001874:	f10a 0a01 	add.w	sl, sl, #1
 8001878:	9304      	str	r3, [sp, #16]
 800187a:	9307      	str	r3, [sp, #28]
 800187c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001880:	931a      	str	r3, [sp, #104]	; 0x68
 8001882:	4654      	mov	r4, sl
 8001884:	2205      	movs	r2, #5
 8001886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800188a:	4858      	ldr	r0, [pc, #352]	; (80019ec <_vfiprintf_r+0x24c>)
 800188c:	f000 fd44 	bl	8002318 <memchr>
 8001890:	9a04      	ldr	r2, [sp, #16]
 8001892:	b9d8      	cbnz	r0, 80018cc <_vfiprintf_r+0x12c>
 8001894:	06d1      	lsls	r1, r2, #27
 8001896:	bf44      	itt	mi
 8001898:	2320      	movmi	r3, #32
 800189a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800189e:	0713      	lsls	r3, r2, #28
 80018a0:	bf44      	itt	mi
 80018a2:	232b      	movmi	r3, #43	; 0x2b
 80018a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018a8:	f89a 3000 	ldrb.w	r3, [sl]
 80018ac:	2b2a      	cmp	r3, #42	; 0x2a
 80018ae:	d015      	beq.n	80018dc <_vfiprintf_r+0x13c>
 80018b0:	4654      	mov	r4, sl
 80018b2:	2000      	movs	r0, #0
 80018b4:	f04f 0c0a 	mov.w	ip, #10
 80018b8:	9a07      	ldr	r2, [sp, #28]
 80018ba:	4621      	mov	r1, r4
 80018bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018c0:	3b30      	subs	r3, #48	; 0x30
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d94e      	bls.n	8001964 <_vfiprintf_r+0x1c4>
 80018c6:	b1b0      	cbz	r0, 80018f6 <_vfiprintf_r+0x156>
 80018c8:	9207      	str	r2, [sp, #28]
 80018ca:	e014      	b.n	80018f6 <_vfiprintf_r+0x156>
 80018cc:	eba0 0308 	sub.w	r3, r0, r8
 80018d0:	fa09 f303 	lsl.w	r3, r9, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	46a2      	mov	sl, r4
 80018d8:	9304      	str	r3, [sp, #16]
 80018da:	e7d2      	b.n	8001882 <_vfiprintf_r+0xe2>
 80018dc:	9b03      	ldr	r3, [sp, #12]
 80018de:	1d19      	adds	r1, r3, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	9103      	str	r1, [sp, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bfbb      	ittet	lt
 80018e8:	425b      	neglt	r3, r3
 80018ea:	f042 0202 	orrlt.w	r2, r2, #2
 80018ee:	9307      	strge	r3, [sp, #28]
 80018f0:	9307      	strlt	r3, [sp, #28]
 80018f2:	bfb8      	it	lt
 80018f4:	9204      	strlt	r2, [sp, #16]
 80018f6:	7823      	ldrb	r3, [r4, #0]
 80018f8:	2b2e      	cmp	r3, #46	; 0x2e
 80018fa:	d10c      	bne.n	8001916 <_vfiprintf_r+0x176>
 80018fc:	7863      	ldrb	r3, [r4, #1]
 80018fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001900:	d135      	bne.n	800196e <_vfiprintf_r+0x1ce>
 8001902:	9b03      	ldr	r3, [sp, #12]
 8001904:	3402      	adds	r4, #2
 8001906:	1d1a      	adds	r2, r3, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	9203      	str	r2, [sp, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	bfb8      	it	lt
 8001910:	f04f 33ff 	movlt.w	r3, #4294967295
 8001914:	9305      	str	r3, [sp, #20]
 8001916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80019fc <_vfiprintf_r+0x25c>
 800191a:	2203      	movs	r2, #3
 800191c:	4650      	mov	r0, sl
 800191e:	7821      	ldrb	r1, [r4, #0]
 8001920:	f000 fcfa 	bl	8002318 <memchr>
 8001924:	b140      	cbz	r0, 8001938 <_vfiprintf_r+0x198>
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	eba0 000a 	sub.w	r0, r0, sl
 800192c:	fa03 f000 	lsl.w	r0, r3, r0
 8001930:	9b04      	ldr	r3, [sp, #16]
 8001932:	3401      	adds	r4, #1
 8001934:	4303      	orrs	r3, r0
 8001936:	9304      	str	r3, [sp, #16]
 8001938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800193c:	2206      	movs	r2, #6
 800193e:	482c      	ldr	r0, [pc, #176]	; (80019f0 <_vfiprintf_r+0x250>)
 8001940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001944:	f000 fce8 	bl	8002318 <memchr>
 8001948:	2800      	cmp	r0, #0
 800194a:	d03f      	beq.n	80019cc <_vfiprintf_r+0x22c>
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <_vfiprintf_r+0x254>)
 800194e:	bb1b      	cbnz	r3, 8001998 <_vfiprintf_r+0x1f8>
 8001950:	9b03      	ldr	r3, [sp, #12]
 8001952:	3307      	adds	r3, #7
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	3308      	adds	r3, #8
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800195e:	443b      	add	r3, r7
 8001960:	9309      	str	r3, [sp, #36]	; 0x24
 8001962:	e767      	b.n	8001834 <_vfiprintf_r+0x94>
 8001964:	460c      	mov	r4, r1
 8001966:	2001      	movs	r0, #1
 8001968:	fb0c 3202 	mla	r2, ip, r2, r3
 800196c:	e7a5      	b.n	80018ba <_vfiprintf_r+0x11a>
 800196e:	2300      	movs	r3, #0
 8001970:	f04f 0c0a 	mov.w	ip, #10
 8001974:	4619      	mov	r1, r3
 8001976:	3401      	adds	r4, #1
 8001978:	9305      	str	r3, [sp, #20]
 800197a:	4620      	mov	r0, r4
 800197c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001980:	3a30      	subs	r2, #48	; 0x30
 8001982:	2a09      	cmp	r2, #9
 8001984:	d903      	bls.n	800198e <_vfiprintf_r+0x1ee>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0c5      	beq.n	8001916 <_vfiprintf_r+0x176>
 800198a:	9105      	str	r1, [sp, #20]
 800198c:	e7c3      	b.n	8001916 <_vfiprintf_r+0x176>
 800198e:	4604      	mov	r4, r0
 8001990:	2301      	movs	r3, #1
 8001992:	fb0c 2101 	mla	r1, ip, r1, r2
 8001996:	e7f0      	b.n	800197a <_vfiprintf_r+0x1da>
 8001998:	ab03      	add	r3, sp, #12
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	462a      	mov	r2, r5
 800199e:	4630      	mov	r0, r6
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_vfiprintf_r+0x258>)
 80019a2:	a904      	add	r1, sp, #16
 80019a4:	f3af 8000 	nop.w
 80019a8:	4607      	mov	r7, r0
 80019aa:	1c78      	adds	r0, r7, #1
 80019ac:	d1d6      	bne.n	800195c <_vfiprintf_r+0x1bc>
 80019ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019b0:	07d9      	lsls	r1, r3, #31
 80019b2:	d405      	bmi.n	80019c0 <_vfiprintf_r+0x220>
 80019b4:	89ab      	ldrh	r3, [r5, #12]
 80019b6:	059a      	lsls	r2, r3, #22
 80019b8:	d402      	bmi.n	80019c0 <_vfiprintf_r+0x220>
 80019ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019bc:	f000 fc47 	bl	800224e <__retarget_lock_release_recursive>
 80019c0:	89ab      	ldrh	r3, [r5, #12]
 80019c2:	065b      	lsls	r3, r3, #25
 80019c4:	f53f af12 	bmi.w	80017ec <_vfiprintf_r+0x4c>
 80019c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019ca:	e711      	b.n	80017f0 <_vfiprintf_r+0x50>
 80019cc:	ab03      	add	r3, sp, #12
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	462a      	mov	r2, r5
 80019d2:	4630      	mov	r0, r6
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <_vfiprintf_r+0x258>)
 80019d6:	a904      	add	r1, sp, #16
 80019d8:	f000 f882 	bl	8001ae0 <_printf_i>
 80019dc:	e7e4      	b.n	80019a8 <_vfiprintf_r+0x208>
 80019de:	bf00      	nop
 80019e0:	08002670 	.word	0x08002670
 80019e4:	08002690 	.word	0x08002690
 80019e8:	08002650 	.word	0x08002650
 80019ec:	0800261a 	.word	0x0800261a
 80019f0:	08002624 	.word	0x08002624
 80019f4:	00000000 	.word	0x00000000
 80019f8:	0800177b 	.word	0x0800177b
 80019fc:	08002620 	.word	0x08002620

08001a00 <_printf_common>:
 8001a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a04:	4616      	mov	r6, r2
 8001a06:	4699      	mov	r9, r3
 8001a08:	688a      	ldr	r2, [r1, #8]
 8001a0a:	690b      	ldr	r3, [r1, #16]
 8001a0c:	4607      	mov	r7, r0
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	bfb8      	it	lt
 8001a12:	4613      	movlt	r3, r2
 8001a14:	6033      	str	r3, [r6, #0]
 8001a16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a20:	b10a      	cbz	r2, 8001a26 <_printf_common+0x26>
 8001a22:	3301      	adds	r3, #1
 8001a24:	6033      	str	r3, [r6, #0]
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	0699      	lsls	r1, r3, #26
 8001a2a:	bf42      	ittt	mi
 8001a2c:	6833      	ldrmi	r3, [r6, #0]
 8001a2e:	3302      	addmi	r3, #2
 8001a30:	6033      	strmi	r3, [r6, #0]
 8001a32:	6825      	ldr	r5, [r4, #0]
 8001a34:	f015 0506 	ands.w	r5, r5, #6
 8001a38:	d106      	bne.n	8001a48 <_printf_common+0x48>
 8001a3a:	f104 0a19 	add.w	sl, r4, #25
 8001a3e:	68e3      	ldr	r3, [r4, #12]
 8001a40:	6832      	ldr	r2, [r6, #0]
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	42ab      	cmp	r3, r5
 8001a46:	dc28      	bgt.n	8001a9a <_printf_common+0x9a>
 8001a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a4c:	1e13      	subs	r3, r2, #0
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	bf18      	it	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	0692      	lsls	r2, r2, #26
 8001a56:	d42d      	bmi.n	8001ab4 <_printf_common+0xb4>
 8001a58:	4649      	mov	r1, r9
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a60:	47c0      	blx	r8
 8001a62:	3001      	adds	r0, #1
 8001a64:	d020      	beq.n	8001aa8 <_printf_common+0xa8>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	68e5      	ldr	r5, [r4, #12]
 8001a6a:	f003 0306 	and.w	r3, r3, #6
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf18      	it	ne
 8001a72:	2500      	movne	r5, #0
 8001a74:	6832      	ldr	r2, [r6, #0]
 8001a76:	f04f 0600 	mov.w	r6, #0
 8001a7a:	68a3      	ldr	r3, [r4, #8]
 8001a7c:	bf08      	it	eq
 8001a7e:	1aad      	subeq	r5, r5, r2
 8001a80:	6922      	ldr	r2, [r4, #16]
 8001a82:	bf08      	it	eq
 8001a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bfc4      	itt	gt
 8001a8c:	1a9b      	subgt	r3, r3, r2
 8001a8e:	18ed      	addgt	r5, r5, r3
 8001a90:	341a      	adds	r4, #26
 8001a92:	42b5      	cmp	r5, r6
 8001a94:	d11a      	bne.n	8001acc <_printf_common+0xcc>
 8001a96:	2000      	movs	r0, #0
 8001a98:	e008      	b.n	8001aac <_printf_common+0xac>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	47c0      	blx	r8
 8001aa4:	3001      	adds	r0, #1
 8001aa6:	d103      	bne.n	8001ab0 <_printf_common+0xb0>
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab0:	3501      	adds	r5, #1
 8001ab2:	e7c4      	b.n	8001a3e <_printf_common+0x3e>
 8001ab4:	2030      	movs	r0, #48	; 0x30
 8001ab6:	18e1      	adds	r1, r4, r3
 8001ab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ac2:	4422      	add	r2, r4
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aca:	e7c5      	b.n	8001a58 <_printf_common+0x58>
 8001acc:	2301      	movs	r3, #1
 8001ace:	4622      	mov	r2, r4
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	4638      	mov	r0, r7
 8001ad4:	47c0      	blx	r8
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	d0e6      	beq.n	8001aa8 <_printf_common+0xa8>
 8001ada:	3601      	adds	r6, #1
 8001adc:	e7d9      	b.n	8001a92 <_printf_common+0x92>
	...

08001ae0 <_printf_i>:
 8001ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	7e27      	ldrb	r7, [r4, #24]
 8001ae8:	4691      	mov	r9, r2
 8001aea:	2f78      	cmp	r7, #120	; 0x78
 8001aec:	4680      	mov	r8, r0
 8001aee:	469a      	mov	sl, r3
 8001af0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001af6:	d807      	bhi.n	8001b08 <_printf_i+0x28>
 8001af8:	2f62      	cmp	r7, #98	; 0x62
 8001afa:	d80a      	bhi.n	8001b12 <_printf_i+0x32>
 8001afc:	2f00      	cmp	r7, #0
 8001afe:	f000 80d9 	beq.w	8001cb4 <_printf_i+0x1d4>
 8001b02:	2f58      	cmp	r7, #88	; 0x58
 8001b04:	f000 80a4 	beq.w	8001c50 <_printf_i+0x170>
 8001b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b10:	e03a      	b.n	8001b88 <_printf_i+0xa8>
 8001b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b16:	2b15      	cmp	r3, #21
 8001b18:	d8f6      	bhi.n	8001b08 <_printf_i+0x28>
 8001b1a:	a001      	add	r0, pc, #4	; (adr r0, 8001b20 <_printf_i+0x40>)
 8001b1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001b20:	08001b79 	.word	0x08001b79
 8001b24:	08001b8d 	.word	0x08001b8d
 8001b28:	08001b09 	.word	0x08001b09
 8001b2c:	08001b09 	.word	0x08001b09
 8001b30:	08001b09 	.word	0x08001b09
 8001b34:	08001b09 	.word	0x08001b09
 8001b38:	08001b8d 	.word	0x08001b8d
 8001b3c:	08001b09 	.word	0x08001b09
 8001b40:	08001b09 	.word	0x08001b09
 8001b44:	08001b09 	.word	0x08001b09
 8001b48:	08001b09 	.word	0x08001b09
 8001b4c:	08001c9b 	.word	0x08001c9b
 8001b50:	08001bbd 	.word	0x08001bbd
 8001b54:	08001c7d 	.word	0x08001c7d
 8001b58:	08001b09 	.word	0x08001b09
 8001b5c:	08001b09 	.word	0x08001b09
 8001b60:	08001cbd 	.word	0x08001cbd
 8001b64:	08001b09 	.word	0x08001b09
 8001b68:	08001bbd 	.word	0x08001bbd
 8001b6c:	08001b09 	.word	0x08001b09
 8001b70:	08001b09 	.word	0x08001b09
 8001b74:	08001c85 	.word	0x08001c85
 8001b78:	680b      	ldr	r3, [r1, #0]
 8001b7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b7e:	1d1a      	adds	r2, r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	600a      	str	r2, [r1, #0]
 8001b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0a4      	b.n	8001cd6 <_printf_i+0x1f6>
 8001b8c:	6825      	ldr	r5, [r4, #0]
 8001b8e:	6808      	ldr	r0, [r1, #0]
 8001b90:	062e      	lsls	r6, r5, #24
 8001b92:	f100 0304 	add.w	r3, r0, #4
 8001b96:	d50a      	bpl.n	8001bae <_printf_i+0xce>
 8001b98:	6805      	ldr	r5, [r0, #0]
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	2d00      	cmp	r5, #0
 8001b9e:	da03      	bge.n	8001ba8 <_printf_i+0xc8>
 8001ba0:	232d      	movs	r3, #45	; 0x2d
 8001ba2:	426d      	negs	r5, r5
 8001ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ba8:	230a      	movs	r3, #10
 8001baa:	485e      	ldr	r0, [pc, #376]	; (8001d24 <_printf_i+0x244>)
 8001bac:	e019      	b.n	8001be2 <_printf_i+0x102>
 8001bae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001bb2:	6805      	ldr	r5, [r0, #0]
 8001bb4:	600b      	str	r3, [r1, #0]
 8001bb6:	bf18      	it	ne
 8001bb8:	b22d      	sxthne	r5, r5
 8001bba:	e7ef      	b.n	8001b9c <_printf_i+0xbc>
 8001bbc:	680b      	ldr	r3, [r1, #0]
 8001bbe:	6825      	ldr	r5, [r4, #0]
 8001bc0:	1d18      	adds	r0, r3, #4
 8001bc2:	6008      	str	r0, [r1, #0]
 8001bc4:	0628      	lsls	r0, r5, #24
 8001bc6:	d501      	bpl.n	8001bcc <_printf_i+0xec>
 8001bc8:	681d      	ldr	r5, [r3, #0]
 8001bca:	e002      	b.n	8001bd2 <_printf_i+0xf2>
 8001bcc:	0669      	lsls	r1, r5, #25
 8001bce:	d5fb      	bpl.n	8001bc8 <_printf_i+0xe8>
 8001bd0:	881d      	ldrh	r5, [r3, #0]
 8001bd2:	2f6f      	cmp	r7, #111	; 0x6f
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2308      	moveq	r3, #8
 8001bd8:	230a      	movne	r3, #10
 8001bda:	4852      	ldr	r0, [pc, #328]	; (8001d24 <_printf_i+0x244>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001be2:	6866      	ldr	r6, [r4, #4]
 8001be4:	2e00      	cmp	r6, #0
 8001be6:	bfa8      	it	ge
 8001be8:	6821      	ldrge	r1, [r4, #0]
 8001bea:	60a6      	str	r6, [r4, #8]
 8001bec:	bfa4      	itt	ge
 8001bee:	f021 0104 	bicge.w	r1, r1, #4
 8001bf2:	6021      	strge	r1, [r4, #0]
 8001bf4:	b90d      	cbnz	r5, 8001bfa <_printf_i+0x11a>
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d04d      	beq.n	8001c96 <_printf_i+0x1b6>
 8001bfa:	4616      	mov	r6, r2
 8001bfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c00:	fb03 5711 	mls	r7, r3, r1, r5
 8001c04:	5dc7      	ldrb	r7, [r0, r7]
 8001c06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c0a:	462f      	mov	r7, r5
 8001c0c:	42bb      	cmp	r3, r7
 8001c0e:	460d      	mov	r5, r1
 8001c10:	d9f4      	bls.n	8001bfc <_printf_i+0x11c>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d10b      	bne.n	8001c2e <_printf_i+0x14e>
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	07df      	lsls	r7, r3, #31
 8001c1a:	d508      	bpl.n	8001c2e <_printf_i+0x14e>
 8001c1c:	6923      	ldr	r3, [r4, #16]
 8001c1e:	6861      	ldr	r1, [r4, #4]
 8001c20:	4299      	cmp	r1, r3
 8001c22:	bfde      	ittt	le
 8001c24:	2330      	movle	r3, #48	; 0x30
 8001c26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c2e:	1b92      	subs	r2, r2, r6
 8001c30:	6122      	str	r2, [r4, #16]
 8001c32:	464b      	mov	r3, r9
 8001c34:	4621      	mov	r1, r4
 8001c36:	4640      	mov	r0, r8
 8001c38:	f8cd a000 	str.w	sl, [sp]
 8001c3c:	aa03      	add	r2, sp, #12
 8001c3e:	f7ff fedf 	bl	8001a00 <_printf_common>
 8001c42:	3001      	adds	r0, #1
 8001c44:	d14c      	bne.n	8001ce0 <_printf_i+0x200>
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4a:	b004      	add	sp, #16
 8001c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c50:	4834      	ldr	r0, [pc, #208]	; (8001d24 <_printf_i+0x244>)
 8001c52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c56:	680e      	ldr	r6, [r1, #0]
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001c5e:	061f      	lsls	r7, r3, #24
 8001c60:	600e      	str	r6, [r1, #0]
 8001c62:	d514      	bpl.n	8001c8e <_printf_i+0x1ae>
 8001c64:	07d9      	lsls	r1, r3, #31
 8001c66:	bf44      	itt	mi
 8001c68:	f043 0320 	orrmi.w	r3, r3, #32
 8001c6c:	6023      	strmi	r3, [r4, #0]
 8001c6e:	b91d      	cbnz	r5, 8001c78 <_printf_i+0x198>
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f023 0320 	bic.w	r3, r3, #32
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	2310      	movs	r3, #16
 8001c7a:	e7af      	b.n	8001bdc <_printf_i+0xfc>
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	f043 0320 	orr.w	r3, r3, #32
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	2378      	movs	r3, #120	; 0x78
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <_printf_i+0x248>)
 8001c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c8c:	e7e3      	b.n	8001c56 <_printf_i+0x176>
 8001c8e:	065e      	lsls	r6, r3, #25
 8001c90:	bf48      	it	mi
 8001c92:	b2ad      	uxthmi	r5, r5
 8001c94:	e7e6      	b.n	8001c64 <_printf_i+0x184>
 8001c96:	4616      	mov	r6, r2
 8001c98:	e7bb      	b.n	8001c12 <_printf_i+0x132>
 8001c9a:	680b      	ldr	r3, [r1, #0]
 8001c9c:	6826      	ldr	r6, [r4, #0]
 8001c9e:	1d1d      	adds	r5, r3, #4
 8001ca0:	6960      	ldr	r0, [r4, #20]
 8001ca2:	600d      	str	r5, [r1, #0]
 8001ca4:	0635      	lsls	r5, r6, #24
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	d501      	bpl.n	8001cae <_printf_i+0x1ce>
 8001caa:	6018      	str	r0, [r3, #0]
 8001cac:	e002      	b.n	8001cb4 <_printf_i+0x1d4>
 8001cae:	0671      	lsls	r1, r6, #25
 8001cb0:	d5fb      	bpl.n	8001caa <_printf_i+0x1ca>
 8001cb2:	8018      	strh	r0, [r3, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	4616      	mov	r6, r2
 8001cb8:	6123      	str	r3, [r4, #16]
 8001cba:	e7ba      	b.n	8001c32 <_printf_i+0x152>
 8001cbc:	680b      	ldr	r3, [r1, #0]
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	600a      	str	r2, [r1, #0]
 8001cc2:	681e      	ldr	r6, [r3, #0]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	6862      	ldr	r2, [r4, #4]
 8001cca:	f000 fb25 	bl	8002318 <memchr>
 8001cce:	b108      	cbz	r0, 8001cd4 <_printf_i+0x1f4>
 8001cd0:	1b80      	subs	r0, r0, r6
 8001cd2:	6060      	str	r0, [r4, #4]
 8001cd4:	6863      	ldr	r3, [r4, #4]
 8001cd6:	6123      	str	r3, [r4, #16]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cde:	e7a8      	b.n	8001c32 <_printf_i+0x152>
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	6923      	ldr	r3, [r4, #16]
 8001ce8:	47d0      	blx	sl
 8001cea:	3001      	adds	r0, #1
 8001cec:	d0ab      	beq.n	8001c46 <_printf_i+0x166>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d413      	bmi.n	8001d1c <_printf_i+0x23c>
 8001cf4:	68e0      	ldr	r0, [r4, #12]
 8001cf6:	9b03      	ldr	r3, [sp, #12]
 8001cf8:	4298      	cmp	r0, r3
 8001cfa:	bfb8      	it	lt
 8001cfc:	4618      	movlt	r0, r3
 8001cfe:	e7a4      	b.n	8001c4a <_printf_i+0x16a>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4632      	mov	r2, r6
 8001d04:	4649      	mov	r1, r9
 8001d06:	4640      	mov	r0, r8
 8001d08:	47d0      	blx	sl
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	d09b      	beq.n	8001c46 <_printf_i+0x166>
 8001d0e:	3501      	adds	r5, #1
 8001d10:	68e3      	ldr	r3, [r4, #12]
 8001d12:	9903      	ldr	r1, [sp, #12]
 8001d14:	1a5b      	subs	r3, r3, r1
 8001d16:	42ab      	cmp	r3, r5
 8001d18:	dcf2      	bgt.n	8001d00 <_printf_i+0x220>
 8001d1a:	e7eb      	b.n	8001cf4 <_printf_i+0x214>
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	f104 0619 	add.w	r6, r4, #25
 8001d22:	e7f5      	b.n	8001d10 <_printf_i+0x230>
 8001d24:	0800262b 	.word	0x0800262b
 8001d28:	0800263c 	.word	0x0800263c

08001d2c <_sbrk_r>:
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	2300      	movs	r3, #0
 8001d30:	4d05      	ldr	r5, [pc, #20]	; (8001d48 <_sbrk_r+0x1c>)
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	602b      	str	r3, [r5, #0]
 8001d38:	f7fe fc74 	bl	8000624 <_sbrk>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_sbrk_r+0x1a>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_sbrk_r+0x1a>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200000a8 	.word	0x200000a8

08001d4c <__swbuf_r>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	460e      	mov	r6, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	4605      	mov	r5, r0
 8001d54:	b118      	cbz	r0, 8001d5e <__swbuf_r+0x12>
 8001d56:	6983      	ldr	r3, [r0, #24]
 8001d58:	b90b      	cbnz	r3, 8001d5e <__swbuf_r+0x12>
 8001d5a:	f000 f9d9 	bl	8002110 <__sinit>
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <__swbuf_r+0x98>)
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d12b      	bne.n	8001dbc <__swbuf_r+0x70>
 8001d64:	686c      	ldr	r4, [r5, #4]
 8001d66:	69a3      	ldr	r3, [r4, #24]
 8001d68:	60a3      	str	r3, [r4, #8]
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	071a      	lsls	r2, r3, #28
 8001d6e:	d52f      	bpl.n	8001dd0 <__swbuf_r+0x84>
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	b36b      	cbz	r3, 8001dd0 <__swbuf_r+0x84>
 8001d74:	6923      	ldr	r3, [r4, #16]
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	b2f6      	uxtb	r6, r6
 8001d7a:	1ac0      	subs	r0, r0, r3
 8001d7c:	6963      	ldr	r3, [r4, #20]
 8001d7e:	4637      	mov	r7, r6
 8001d80:	4283      	cmp	r3, r0
 8001d82:	dc04      	bgt.n	8001d8e <__swbuf_r+0x42>
 8001d84:	4621      	mov	r1, r4
 8001d86:	4628      	mov	r0, r5
 8001d88:	f000 f92e 	bl	8001fe8 <_fflush_r>
 8001d8c:	bb30      	cbnz	r0, 8001ddc <__swbuf_r+0x90>
 8001d8e:	68a3      	ldr	r3, [r4, #8]
 8001d90:	3001      	adds	r0, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60a3      	str	r3, [r4, #8]
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	6022      	str	r2, [r4, #0]
 8001d9c:	701e      	strb	r6, [r3, #0]
 8001d9e:	6963      	ldr	r3, [r4, #20]
 8001da0:	4283      	cmp	r3, r0
 8001da2:	d004      	beq.n	8001dae <__swbuf_r+0x62>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	07db      	lsls	r3, r3, #31
 8001da8:	d506      	bpl.n	8001db8 <__swbuf_r+0x6c>
 8001daa:	2e0a      	cmp	r6, #10
 8001dac:	d104      	bne.n	8001db8 <__swbuf_r+0x6c>
 8001dae:	4621      	mov	r1, r4
 8001db0:	4628      	mov	r0, r5
 8001db2:	f000 f919 	bl	8001fe8 <_fflush_r>
 8001db6:	b988      	cbnz	r0, 8001ddc <__swbuf_r+0x90>
 8001db8:	4638      	mov	r0, r7
 8001dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <__swbuf_r+0x9c>)
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	d101      	bne.n	8001dc6 <__swbuf_r+0x7a>
 8001dc2:	68ac      	ldr	r4, [r5, #8]
 8001dc4:	e7cf      	b.n	8001d66 <__swbuf_r+0x1a>
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <__swbuf_r+0xa0>)
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	bf08      	it	eq
 8001dcc:	68ec      	ldreq	r4, [r5, #12]
 8001dce:	e7ca      	b.n	8001d66 <__swbuf_r+0x1a>
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f000 f80c 	bl	8001df0 <__swsetup_r>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d0cb      	beq.n	8001d74 <__swbuf_r+0x28>
 8001ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8001de0:	e7ea      	b.n	8001db8 <__swbuf_r+0x6c>
 8001de2:	bf00      	nop
 8001de4:	08002670 	.word	0x08002670
 8001de8:	08002690 	.word	0x08002690
 8001dec:	08002650 	.word	0x08002650

08001df0 <__swsetup_r>:
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <__swsetup_r+0xcc>)
 8001df2:	b570      	push	{r4, r5, r6, lr}
 8001df4:	681d      	ldr	r5, [r3, #0]
 8001df6:	4606      	mov	r6, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	b125      	cbz	r5, 8001e06 <__swsetup_r+0x16>
 8001dfc:	69ab      	ldr	r3, [r5, #24]
 8001dfe:	b913      	cbnz	r3, 8001e06 <__swsetup_r+0x16>
 8001e00:	4628      	mov	r0, r5
 8001e02:	f000 f985 	bl	8002110 <__sinit>
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <__swsetup_r+0xd0>)
 8001e08:	429c      	cmp	r4, r3
 8001e0a:	d10f      	bne.n	8001e2c <__swsetup_r+0x3c>
 8001e0c:	686c      	ldr	r4, [r5, #4]
 8001e0e:	89a3      	ldrh	r3, [r4, #12]
 8001e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e14:	0719      	lsls	r1, r3, #28
 8001e16:	d42c      	bmi.n	8001e72 <__swsetup_r+0x82>
 8001e18:	06dd      	lsls	r5, r3, #27
 8001e1a:	d411      	bmi.n	8001e40 <__swsetup_r+0x50>
 8001e1c:	2309      	movs	r3, #9
 8001e1e:	6033      	str	r3, [r6, #0]
 8001e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	81a3      	strh	r3, [r4, #12]
 8001e2a:	e03e      	b.n	8001eaa <__swsetup_r+0xba>
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <__swsetup_r+0xd4>)
 8001e2e:	429c      	cmp	r4, r3
 8001e30:	d101      	bne.n	8001e36 <__swsetup_r+0x46>
 8001e32:	68ac      	ldr	r4, [r5, #8]
 8001e34:	e7eb      	b.n	8001e0e <__swsetup_r+0x1e>
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <__swsetup_r+0xd8>)
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	bf08      	it	eq
 8001e3c:	68ec      	ldreq	r4, [r5, #12]
 8001e3e:	e7e6      	b.n	8001e0e <__swsetup_r+0x1e>
 8001e40:	0758      	lsls	r0, r3, #29
 8001e42:	d512      	bpl.n	8001e6a <__swsetup_r+0x7a>
 8001e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e46:	b141      	cbz	r1, 8001e5a <__swsetup_r+0x6a>
 8001e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d002      	beq.n	8001e56 <__swsetup_r+0x66>
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff fbd7 	bl	8001604 <_free_r>
 8001e56:	2300      	movs	r3, #0
 8001e58:	6363      	str	r3, [r4, #52]	; 0x34
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e60:	81a3      	strh	r3, [r4, #12]
 8001e62:	2300      	movs	r3, #0
 8001e64:	6063      	str	r3, [r4, #4]
 8001e66:	6923      	ldr	r3, [r4, #16]
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	89a3      	ldrh	r3, [r4, #12]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	81a3      	strh	r3, [r4, #12]
 8001e72:	6923      	ldr	r3, [r4, #16]
 8001e74:	b94b      	cbnz	r3, 8001e8a <__swsetup_r+0x9a>
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d003      	beq.n	8001e8a <__swsetup_r+0x9a>
 8001e82:	4621      	mov	r1, r4
 8001e84:	4630      	mov	r0, r6
 8001e86:	f000 fa07 	bl	8002298 <__smakebuf_r>
 8001e8a:	89a0      	ldrh	r0, [r4, #12]
 8001e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e90:	f010 0301 	ands.w	r3, r0, #1
 8001e94:	d00a      	beq.n	8001eac <__swsetup_r+0xbc>
 8001e96:	2300      	movs	r3, #0
 8001e98:	60a3      	str	r3, [r4, #8]
 8001e9a:	6963      	ldr	r3, [r4, #20]
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	61a3      	str	r3, [r4, #24]
 8001ea0:	6923      	ldr	r3, [r4, #16]
 8001ea2:	b943      	cbnz	r3, 8001eb6 <__swsetup_r+0xc6>
 8001ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ea8:	d1ba      	bne.n	8001e20 <__swsetup_r+0x30>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	0781      	lsls	r1, r0, #30
 8001eae:	bf58      	it	pl
 8001eb0:	6963      	ldrpl	r3, [r4, #20]
 8001eb2:	60a3      	str	r3, [r4, #8]
 8001eb4:	e7f4      	b.n	8001ea0 <__swsetup_r+0xb0>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e7f7      	b.n	8001eaa <__swsetup_r+0xba>
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c
 8001ec0:	08002670 	.word	0x08002670
 8001ec4:	08002690 	.word	0x08002690
 8001ec8:	08002650 	.word	0x08002650

08001ecc <abort>:
 8001ecc:	2006      	movs	r0, #6
 8001ece:	b508      	push	{r3, lr}
 8001ed0:	f000 fa64 	bl	800239c <raise>
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7fe fb31 	bl	800053c <_exit>
	...

08001edc <__sflush_r>:
 8001edc:	898a      	ldrh	r2, [r1, #12]
 8001ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	0710      	lsls	r0, r2, #28
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	d458      	bmi.n	8001f9c <__sflush_r+0xc0>
 8001eea:	684b      	ldr	r3, [r1, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dc05      	bgt.n	8001efc <__sflush_r+0x20>
 8001ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	dc02      	bgt.n	8001efc <__sflush_r+0x20>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001efe:	2e00      	cmp	r6, #0
 8001f00:	d0f9      	beq.n	8001ef6 <__sflush_r+0x1a>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f08:	682f      	ldr	r7, [r5, #0]
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	d032      	beq.n	8001f74 <__sflush_r+0x98>
 8001f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	075a      	lsls	r2, r3, #29
 8001f14:	d505      	bpl.n	8001f22 <__sflush_r+0x46>
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	1ac0      	subs	r0, r0, r3
 8001f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f1c:	b10b      	cbz	r3, 8001f22 <__sflush_r+0x46>
 8001f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f20:	1ac0      	subs	r0, r0, r3
 8001f22:	2300      	movs	r3, #0
 8001f24:	4602      	mov	r2, r0
 8001f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f28:	4628      	mov	r0, r5
 8001f2a:	6a21      	ldr	r1, [r4, #32]
 8001f2c:	47b0      	blx	r6
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	d106      	bne.n	8001f42 <__sflush_r+0x66>
 8001f34:	6829      	ldr	r1, [r5, #0]
 8001f36:	291d      	cmp	r1, #29
 8001f38:	d82c      	bhi.n	8001f94 <__sflush_r+0xb8>
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <__sflush_r+0x108>)
 8001f3c:	40ca      	lsrs	r2, r1
 8001f3e:	07d6      	lsls	r6, r2, #31
 8001f40:	d528      	bpl.n	8001f94 <__sflush_r+0xb8>
 8001f42:	2200      	movs	r2, #0
 8001f44:	6062      	str	r2, [r4, #4]
 8001f46:	6922      	ldr	r2, [r4, #16]
 8001f48:	04d9      	lsls	r1, r3, #19
 8001f4a:	6022      	str	r2, [r4, #0]
 8001f4c:	d504      	bpl.n	8001f58 <__sflush_r+0x7c>
 8001f4e:	1c42      	adds	r2, r0, #1
 8001f50:	d101      	bne.n	8001f56 <__sflush_r+0x7a>
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	b903      	cbnz	r3, 8001f58 <__sflush_r+0x7c>
 8001f56:	6560      	str	r0, [r4, #84]	; 0x54
 8001f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f5a:	602f      	str	r7, [r5, #0]
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d0ca      	beq.n	8001ef6 <__sflush_r+0x1a>
 8001f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f64:	4299      	cmp	r1, r3
 8001f66:	d002      	beq.n	8001f6e <__sflush_r+0x92>
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7ff fb4b 	bl	8001604 <_free_r>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	6360      	str	r0, [r4, #52]	; 0x34
 8001f72:	e7c1      	b.n	8001ef8 <__sflush_r+0x1c>
 8001f74:	6a21      	ldr	r1, [r4, #32]
 8001f76:	2301      	movs	r3, #1
 8001f78:	4628      	mov	r0, r5
 8001f7a:	47b0      	blx	r6
 8001f7c:	1c41      	adds	r1, r0, #1
 8001f7e:	d1c7      	bne.n	8001f10 <__sflush_r+0x34>
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0c4      	beq.n	8001f10 <__sflush_r+0x34>
 8001f86:	2b1d      	cmp	r3, #29
 8001f88:	d001      	beq.n	8001f8e <__sflush_r+0xb2>
 8001f8a:	2b16      	cmp	r3, #22
 8001f8c:	d101      	bne.n	8001f92 <__sflush_r+0xb6>
 8001f8e:	602f      	str	r7, [r5, #0]
 8001f90:	e7b1      	b.n	8001ef6 <__sflush_r+0x1a>
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f98:	81a3      	strh	r3, [r4, #12]
 8001f9a:	e7ad      	b.n	8001ef8 <__sflush_r+0x1c>
 8001f9c:	690f      	ldr	r7, [r1, #16]
 8001f9e:	2f00      	cmp	r7, #0
 8001fa0:	d0a9      	beq.n	8001ef6 <__sflush_r+0x1a>
 8001fa2:	0793      	lsls	r3, r2, #30
 8001fa4:	bf18      	it	ne
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	680e      	ldr	r6, [r1, #0]
 8001faa:	bf08      	it	eq
 8001fac:	694b      	ldreq	r3, [r1, #20]
 8001fae:	eba6 0807 	sub.w	r8, r6, r7
 8001fb2:	600f      	str	r7, [r1, #0]
 8001fb4:	608b      	str	r3, [r1, #8]
 8001fb6:	f1b8 0f00 	cmp.w	r8, #0
 8001fba:	dd9c      	ble.n	8001ef6 <__sflush_r+0x1a>
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	463a      	mov	r2, r7
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	6a21      	ldr	r1, [r4, #32]
 8001fc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fc6:	47b0      	blx	r6
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	dc06      	bgt.n	8001fda <__sflush_r+0xfe>
 8001fcc:	89a3      	ldrh	r3, [r4, #12]
 8001fce:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd6:	81a3      	strh	r3, [r4, #12]
 8001fd8:	e78e      	b.n	8001ef8 <__sflush_r+0x1c>
 8001fda:	4407      	add	r7, r0
 8001fdc:	eba8 0800 	sub.w	r8, r8, r0
 8001fe0:	e7e9      	b.n	8001fb6 <__sflush_r+0xda>
 8001fe2:	bf00      	nop
 8001fe4:	20400001 	.word	0x20400001

08001fe8 <_fflush_r>:
 8001fe8:	b538      	push	{r3, r4, r5, lr}
 8001fea:	690b      	ldr	r3, [r1, #16]
 8001fec:	4605      	mov	r5, r0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	b913      	cbnz	r3, 8001ff8 <_fflush_r+0x10>
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	b118      	cbz	r0, 8002002 <_fflush_r+0x1a>
 8001ffa:	6983      	ldr	r3, [r0, #24]
 8001ffc:	b90b      	cbnz	r3, 8002002 <_fflush_r+0x1a>
 8001ffe:	f000 f887 	bl	8002110 <__sinit>
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <_fflush_r+0x6c>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d11b      	bne.n	8002040 <_fflush_r+0x58>
 8002008:	686c      	ldr	r4, [r5, #4]
 800200a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ef      	beq.n	8001ff2 <_fflush_r+0xa>
 8002012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002014:	07d0      	lsls	r0, r2, #31
 8002016:	d404      	bmi.n	8002022 <_fflush_r+0x3a>
 8002018:	0599      	lsls	r1, r3, #22
 800201a:	d402      	bmi.n	8002022 <_fflush_r+0x3a>
 800201c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800201e:	f000 f915 	bl	800224c <__retarget_lock_acquire_recursive>
 8002022:	4628      	mov	r0, r5
 8002024:	4621      	mov	r1, r4
 8002026:	f7ff ff59 	bl	8001edc <__sflush_r>
 800202a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800202c:	4605      	mov	r5, r0
 800202e:	07da      	lsls	r2, r3, #31
 8002030:	d4e0      	bmi.n	8001ff4 <_fflush_r+0xc>
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	059b      	lsls	r3, r3, #22
 8002036:	d4dd      	bmi.n	8001ff4 <_fflush_r+0xc>
 8002038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800203a:	f000 f908 	bl	800224e <__retarget_lock_release_recursive>
 800203e:	e7d9      	b.n	8001ff4 <_fflush_r+0xc>
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <_fflush_r+0x70>)
 8002042:	429c      	cmp	r4, r3
 8002044:	d101      	bne.n	800204a <_fflush_r+0x62>
 8002046:	68ac      	ldr	r4, [r5, #8]
 8002048:	e7df      	b.n	800200a <_fflush_r+0x22>
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <_fflush_r+0x74>)
 800204c:	429c      	cmp	r4, r3
 800204e:	bf08      	it	eq
 8002050:	68ec      	ldreq	r4, [r5, #12]
 8002052:	e7da      	b.n	800200a <_fflush_r+0x22>
 8002054:	08002670 	.word	0x08002670
 8002058:	08002690 	.word	0x08002690
 800205c:	08002650 	.word	0x08002650

08002060 <std>:
 8002060:	2300      	movs	r3, #0
 8002062:	b510      	push	{r4, lr}
 8002064:	4604      	mov	r4, r0
 8002066:	e9c0 3300 	strd	r3, r3, [r0]
 800206a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800206e:	6083      	str	r3, [r0, #8]
 8002070:	8181      	strh	r1, [r0, #12]
 8002072:	6643      	str	r3, [r0, #100]	; 0x64
 8002074:	81c2      	strh	r2, [r0, #14]
 8002076:	6183      	str	r3, [r0, #24]
 8002078:	4619      	mov	r1, r3
 800207a:	2208      	movs	r2, #8
 800207c:	305c      	adds	r0, #92	; 0x5c
 800207e:	f7ff fa41 	bl	8001504 <memset>
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <std+0x38>)
 8002084:	6224      	str	r4, [r4, #32]
 8002086:	6263      	str	r3, [r4, #36]	; 0x24
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <std+0x3c>)
 800208a:	62a3      	str	r3, [r4, #40]	; 0x28
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <std+0x40>)
 800208e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <std+0x44>)
 8002092:	6323      	str	r3, [r4, #48]	; 0x30
 8002094:	bd10      	pop	{r4, pc}
 8002096:	bf00      	nop
 8002098:	080023d5 	.word	0x080023d5
 800209c:	080023f7 	.word	0x080023f7
 80020a0:	0800242f 	.word	0x0800242f
 80020a4:	08002453 	.word	0x08002453

080020a8 <_cleanup_r>:
 80020a8:	4901      	ldr	r1, [pc, #4]	; (80020b0 <_cleanup_r+0x8>)
 80020aa:	f000 b8af 	b.w	800220c <_fwalk_reent>
 80020ae:	bf00      	nop
 80020b0:	08001fe9 	.word	0x08001fe9

080020b4 <__sfmoreglue>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	2568      	movs	r5, #104	; 0x68
 80020b8:	1e4a      	subs	r2, r1, #1
 80020ba:	4355      	muls	r5, r2
 80020bc:	460e      	mov	r6, r1
 80020be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020c2:	f7ff faeb 	bl	800169c <_malloc_r>
 80020c6:	4604      	mov	r4, r0
 80020c8:	b140      	cbz	r0, 80020dc <__sfmoreglue+0x28>
 80020ca:	2100      	movs	r1, #0
 80020cc:	e9c0 1600 	strd	r1, r6, [r0]
 80020d0:	300c      	adds	r0, #12
 80020d2:	60a0      	str	r0, [r4, #8]
 80020d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020d8:	f7ff fa14 	bl	8001504 <memset>
 80020dc:	4620      	mov	r0, r4
 80020de:	bd70      	pop	{r4, r5, r6, pc}

080020e0 <__sfp_lock_acquire>:
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <__sfp_lock_acquire+0x8>)
 80020e2:	f000 b8b3 	b.w	800224c <__retarget_lock_acquire_recursive>
 80020e6:	bf00      	nop
 80020e8:	200000a4 	.word	0x200000a4

080020ec <__sfp_lock_release>:
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <__sfp_lock_release+0x8>)
 80020ee:	f000 b8ae 	b.w	800224e <__retarget_lock_release_recursive>
 80020f2:	bf00      	nop
 80020f4:	200000a4 	.word	0x200000a4

080020f8 <__sinit_lock_acquire>:
 80020f8:	4801      	ldr	r0, [pc, #4]	; (8002100 <__sinit_lock_acquire+0x8>)
 80020fa:	f000 b8a7 	b.w	800224c <__retarget_lock_acquire_recursive>
 80020fe:	bf00      	nop
 8002100:	2000009f 	.word	0x2000009f

08002104 <__sinit_lock_release>:
 8002104:	4801      	ldr	r0, [pc, #4]	; (800210c <__sinit_lock_release+0x8>)
 8002106:	f000 b8a2 	b.w	800224e <__retarget_lock_release_recursive>
 800210a:	bf00      	nop
 800210c:	2000009f 	.word	0x2000009f

08002110 <__sinit>:
 8002110:	b510      	push	{r4, lr}
 8002112:	4604      	mov	r4, r0
 8002114:	f7ff fff0 	bl	80020f8 <__sinit_lock_acquire>
 8002118:	69a3      	ldr	r3, [r4, #24]
 800211a:	b11b      	cbz	r3, 8002124 <__sinit+0x14>
 800211c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002120:	f7ff bff0 	b.w	8002104 <__sinit_lock_release>
 8002124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002128:	6523      	str	r3, [r4, #80]	; 0x50
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <__sinit+0x68>)
 800212c:	4a13      	ldr	r2, [pc, #76]	; (800217c <__sinit+0x6c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	62a2      	str	r2, [r4, #40]	; 0x28
 8002132:	42a3      	cmp	r3, r4
 8002134:	bf08      	it	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	4620      	mov	r0, r4
 800213a:	bf08      	it	eq
 800213c:	61a3      	streq	r3, [r4, #24]
 800213e:	f000 f81f 	bl	8002180 <__sfp>
 8002142:	6060      	str	r0, [r4, #4]
 8002144:	4620      	mov	r0, r4
 8002146:	f000 f81b 	bl	8002180 <__sfp>
 800214a:	60a0      	str	r0, [r4, #8]
 800214c:	4620      	mov	r0, r4
 800214e:	f000 f817 	bl	8002180 <__sfp>
 8002152:	2200      	movs	r2, #0
 8002154:	2104      	movs	r1, #4
 8002156:	60e0      	str	r0, [r4, #12]
 8002158:	6860      	ldr	r0, [r4, #4]
 800215a:	f7ff ff81 	bl	8002060 <std>
 800215e:	2201      	movs	r2, #1
 8002160:	2109      	movs	r1, #9
 8002162:	68a0      	ldr	r0, [r4, #8]
 8002164:	f7ff ff7c 	bl	8002060 <std>
 8002168:	2202      	movs	r2, #2
 800216a:	2112      	movs	r1, #18
 800216c:	68e0      	ldr	r0, [r4, #12]
 800216e:	f7ff ff77 	bl	8002060 <std>
 8002172:	2301      	movs	r3, #1
 8002174:	61a3      	str	r3, [r4, #24]
 8002176:	e7d1      	b.n	800211c <__sinit+0xc>
 8002178:	08002564 	.word	0x08002564
 800217c:	080020a9 	.word	0x080020a9

08002180 <__sfp>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	4607      	mov	r7, r0
 8002184:	f7ff ffac 	bl	80020e0 <__sfp_lock_acquire>
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <__sfp+0x84>)
 800218a:	681e      	ldr	r6, [r3, #0]
 800218c:	69b3      	ldr	r3, [r6, #24]
 800218e:	b913      	cbnz	r3, 8002196 <__sfp+0x16>
 8002190:	4630      	mov	r0, r6
 8002192:	f7ff ffbd 	bl	8002110 <__sinit>
 8002196:	3648      	adds	r6, #72	; 0x48
 8002198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800219c:	3b01      	subs	r3, #1
 800219e:	d503      	bpl.n	80021a8 <__sfp+0x28>
 80021a0:	6833      	ldr	r3, [r6, #0]
 80021a2:	b30b      	cbz	r3, 80021e8 <__sfp+0x68>
 80021a4:	6836      	ldr	r6, [r6, #0]
 80021a6:	e7f7      	b.n	8002198 <__sfp+0x18>
 80021a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021ac:	b9d5      	cbnz	r5, 80021e4 <__sfp+0x64>
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <__sfp+0x88>)
 80021b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021b4:	60e3      	str	r3, [r4, #12]
 80021b6:	6665      	str	r5, [r4, #100]	; 0x64
 80021b8:	f000 f847 	bl	800224a <__retarget_lock_init_recursive>
 80021bc:	f7ff ff96 	bl	80020ec <__sfp_lock_release>
 80021c0:	2208      	movs	r2, #8
 80021c2:	4629      	mov	r1, r5
 80021c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021cc:	6025      	str	r5, [r4, #0]
 80021ce:	61a5      	str	r5, [r4, #24]
 80021d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021d4:	f7ff f996 	bl	8001504 <memset>
 80021d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021e0:	4620      	mov	r0, r4
 80021e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e4:	3468      	adds	r4, #104	; 0x68
 80021e6:	e7d9      	b.n	800219c <__sfp+0x1c>
 80021e8:	2104      	movs	r1, #4
 80021ea:	4638      	mov	r0, r7
 80021ec:	f7ff ff62 	bl	80020b4 <__sfmoreglue>
 80021f0:	4604      	mov	r4, r0
 80021f2:	6030      	str	r0, [r6, #0]
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d1d5      	bne.n	80021a4 <__sfp+0x24>
 80021f8:	f7ff ff78 	bl	80020ec <__sfp_lock_release>
 80021fc:	230c      	movs	r3, #12
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	e7ee      	b.n	80021e0 <__sfp+0x60>
 8002202:	bf00      	nop
 8002204:	08002564 	.word	0x08002564
 8002208:	ffff0001 	.word	0xffff0001

0800220c <_fwalk_reent>:
 800220c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002210:	4606      	mov	r6, r0
 8002212:	4688      	mov	r8, r1
 8002214:	2700      	movs	r7, #0
 8002216:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800221a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800221e:	f1b9 0901 	subs.w	r9, r9, #1
 8002222:	d505      	bpl.n	8002230 <_fwalk_reent+0x24>
 8002224:	6824      	ldr	r4, [r4, #0]
 8002226:	2c00      	cmp	r4, #0
 8002228:	d1f7      	bne.n	800221a <_fwalk_reent+0xe>
 800222a:	4638      	mov	r0, r7
 800222c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002230:	89ab      	ldrh	r3, [r5, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d907      	bls.n	8002246 <_fwalk_reent+0x3a>
 8002236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800223a:	3301      	adds	r3, #1
 800223c:	d003      	beq.n	8002246 <_fwalk_reent+0x3a>
 800223e:	4629      	mov	r1, r5
 8002240:	4630      	mov	r0, r6
 8002242:	47c0      	blx	r8
 8002244:	4307      	orrs	r7, r0
 8002246:	3568      	adds	r5, #104	; 0x68
 8002248:	e7e9      	b.n	800221e <_fwalk_reent+0x12>

0800224a <__retarget_lock_init_recursive>:
 800224a:	4770      	bx	lr

0800224c <__retarget_lock_acquire_recursive>:
 800224c:	4770      	bx	lr

0800224e <__retarget_lock_release_recursive>:
 800224e:	4770      	bx	lr

08002250 <__swhatbuf_r>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	460e      	mov	r6, r1
 8002254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002258:	4614      	mov	r4, r2
 800225a:	2900      	cmp	r1, #0
 800225c:	461d      	mov	r5, r3
 800225e:	b096      	sub	sp, #88	; 0x58
 8002260:	da07      	bge.n	8002272 <__swhatbuf_r+0x22>
 8002262:	2300      	movs	r3, #0
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	89b3      	ldrh	r3, [r6, #12]
 8002268:	061a      	lsls	r2, r3, #24
 800226a:	d410      	bmi.n	800228e <__swhatbuf_r+0x3e>
 800226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002270:	e00e      	b.n	8002290 <__swhatbuf_r+0x40>
 8002272:	466a      	mov	r2, sp
 8002274:	f000 f914 	bl	80024a0 <_fstat_r>
 8002278:	2800      	cmp	r0, #0
 800227a:	dbf2      	blt.n	8002262 <__swhatbuf_r+0x12>
 800227c:	9a01      	ldr	r2, [sp, #4]
 800227e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002286:	425a      	negs	r2, r3
 8002288:	415a      	adcs	r2, r3
 800228a:	602a      	str	r2, [r5, #0]
 800228c:	e7ee      	b.n	800226c <__swhatbuf_r+0x1c>
 800228e:	2340      	movs	r3, #64	; 0x40
 8002290:	2000      	movs	r0, #0
 8002292:	6023      	str	r3, [r4, #0]
 8002294:	b016      	add	sp, #88	; 0x58
 8002296:	bd70      	pop	{r4, r5, r6, pc}

08002298 <__smakebuf_r>:
 8002298:	898b      	ldrh	r3, [r1, #12]
 800229a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800229c:	079d      	lsls	r5, r3, #30
 800229e:	4606      	mov	r6, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	d507      	bpl.n	80022b4 <__smakebuf_r+0x1c>
 80022a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	6123      	str	r3, [r4, #16]
 80022ac:	2301      	movs	r3, #1
 80022ae:	6163      	str	r3, [r4, #20]
 80022b0:	b002      	add	sp, #8
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	466a      	mov	r2, sp
 80022b6:	ab01      	add	r3, sp, #4
 80022b8:	f7ff ffca 	bl	8002250 <__swhatbuf_r>
 80022bc:	9900      	ldr	r1, [sp, #0]
 80022be:	4605      	mov	r5, r0
 80022c0:	4630      	mov	r0, r6
 80022c2:	f7ff f9eb 	bl	800169c <_malloc_r>
 80022c6:	b948      	cbnz	r0, 80022dc <__smakebuf_r+0x44>
 80022c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022cc:	059a      	lsls	r2, r3, #22
 80022ce:	d4ef      	bmi.n	80022b0 <__smakebuf_r+0x18>
 80022d0:	f023 0303 	bic.w	r3, r3, #3
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	81a3      	strh	r3, [r4, #12]
 80022da:	e7e3      	b.n	80022a4 <__smakebuf_r+0xc>
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <__smakebuf_r+0x7c>)
 80022de:	62b3      	str	r3, [r6, #40]	; 0x28
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	6020      	str	r0, [r4, #0]
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	9b00      	ldr	r3, [sp, #0]
 80022ec:	6120      	str	r0, [r4, #16]
 80022ee:	6163      	str	r3, [r4, #20]
 80022f0:	9b01      	ldr	r3, [sp, #4]
 80022f2:	b15b      	cbz	r3, 800230c <__smakebuf_r+0x74>
 80022f4:	4630      	mov	r0, r6
 80022f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fa:	f000 f8e3 	bl	80024c4 <_isatty_r>
 80022fe:	b128      	cbz	r0, 800230c <__smakebuf_r+0x74>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	81a3      	strh	r3, [r4, #12]
 800230c:	89a0      	ldrh	r0, [r4, #12]
 800230e:	4305      	orrs	r5, r0
 8002310:	81a5      	strh	r5, [r4, #12]
 8002312:	e7cd      	b.n	80022b0 <__smakebuf_r+0x18>
 8002314:	080020a9 	.word	0x080020a9

08002318 <memchr>:
 8002318:	4603      	mov	r3, r0
 800231a:	b510      	push	{r4, lr}
 800231c:	b2c9      	uxtb	r1, r1
 800231e:	4402      	add	r2, r0
 8002320:	4293      	cmp	r3, r2
 8002322:	4618      	mov	r0, r3
 8002324:	d101      	bne.n	800232a <memchr+0x12>
 8002326:	2000      	movs	r0, #0
 8002328:	e003      	b.n	8002332 <memchr+0x1a>
 800232a:	7804      	ldrb	r4, [r0, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	428c      	cmp	r4, r1
 8002330:	d1f6      	bne.n	8002320 <memchr+0x8>
 8002332:	bd10      	pop	{r4, pc}

08002334 <__malloc_lock>:
 8002334:	4801      	ldr	r0, [pc, #4]	; (800233c <__malloc_lock+0x8>)
 8002336:	f7ff bf89 	b.w	800224c <__retarget_lock_acquire_recursive>
 800233a:	bf00      	nop
 800233c:	200000a0 	.word	0x200000a0

08002340 <__malloc_unlock>:
 8002340:	4801      	ldr	r0, [pc, #4]	; (8002348 <__malloc_unlock+0x8>)
 8002342:	f7ff bf84 	b.w	800224e <__retarget_lock_release_recursive>
 8002346:	bf00      	nop
 8002348:	200000a0 	.word	0x200000a0

0800234c <_raise_r>:
 800234c:	291f      	cmp	r1, #31
 800234e:	b538      	push	{r3, r4, r5, lr}
 8002350:	4604      	mov	r4, r0
 8002352:	460d      	mov	r5, r1
 8002354:	d904      	bls.n	8002360 <_raise_r+0x14>
 8002356:	2316      	movs	r3, #22
 8002358:	6003      	str	r3, [r0, #0]
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002362:	b112      	cbz	r2, 800236a <_raise_r+0x1e>
 8002364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002368:	b94b      	cbnz	r3, 800237e <_raise_r+0x32>
 800236a:	4620      	mov	r0, r4
 800236c:	f000 f830 	bl	80023d0 <_getpid_r>
 8002370:	462a      	mov	r2, r5
 8002372:	4601      	mov	r1, r0
 8002374:	4620      	mov	r0, r4
 8002376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800237a:	f000 b817 	b.w	80023ac <_kill_r>
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00a      	beq.n	8002398 <_raise_r+0x4c>
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	d103      	bne.n	800238e <_raise_r+0x42>
 8002386:	2316      	movs	r3, #22
 8002388:	6003      	str	r3, [r0, #0]
 800238a:	2001      	movs	r0, #1
 800238c:	e7e7      	b.n	800235e <_raise_r+0x12>
 800238e:	2400      	movs	r4, #0
 8002390:	4628      	mov	r0, r5
 8002392:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002396:	4798      	blx	r3
 8002398:	2000      	movs	r0, #0
 800239a:	e7e0      	b.n	800235e <_raise_r+0x12>

0800239c <raise>:
 800239c:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <raise+0xc>)
 800239e:	4601      	mov	r1, r0
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	f7ff bfd3 	b.w	800234c <_raise_r>
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c

080023ac <_kill_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	2300      	movs	r3, #0
 80023b0:	4d06      	ldr	r5, [pc, #24]	; (80023cc <_kill_r+0x20>)
 80023b2:	4604      	mov	r4, r0
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	602b      	str	r3, [r5, #0]
 80023ba:	f7fe f8af 	bl	800051c <_kill>
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	d102      	bne.n	80023c8 <_kill_r+0x1c>
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	b103      	cbz	r3, 80023c8 <_kill_r+0x1c>
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	bd38      	pop	{r3, r4, r5, pc}
 80023ca:	bf00      	nop
 80023cc:	200000a8 	.word	0x200000a8

080023d0 <_getpid_r>:
 80023d0:	f7fe b89d 	b.w	800050e <_getpid>

080023d4 <__sread>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	460c      	mov	r4, r1
 80023d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023dc:	f000 f894 	bl	8002508 <_read_r>
 80023e0:	2800      	cmp	r0, #0
 80023e2:	bfab      	itete	ge
 80023e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023e6:	89a3      	ldrhlt	r3, [r4, #12]
 80023e8:	181b      	addge	r3, r3, r0
 80023ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023ee:	bfac      	ite	ge
 80023f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023f2:	81a3      	strhlt	r3, [r4, #12]
 80023f4:	bd10      	pop	{r4, pc}

080023f6 <__swrite>:
 80023f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fa:	461f      	mov	r7, r3
 80023fc:	898b      	ldrh	r3, [r1, #12]
 80023fe:	4605      	mov	r5, r0
 8002400:	05db      	lsls	r3, r3, #23
 8002402:	460c      	mov	r4, r1
 8002404:	4616      	mov	r6, r2
 8002406:	d505      	bpl.n	8002414 <__swrite+0x1e>
 8002408:	2302      	movs	r3, #2
 800240a:	2200      	movs	r2, #0
 800240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002410:	f000 f868 	bl	80024e4 <_lseek_r>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	4632      	mov	r2, r6
 8002418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241c:	81a3      	strh	r3, [r4, #12]
 800241e:	4628      	mov	r0, r5
 8002420:	463b      	mov	r3, r7
 8002422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	f000 b817 	b.w	800245c <_write_r>

0800242e <__sseek>:
 800242e:	b510      	push	{r4, lr}
 8002430:	460c      	mov	r4, r1
 8002432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002436:	f000 f855 	bl	80024e4 <_lseek_r>
 800243a:	1c43      	adds	r3, r0, #1
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	bf15      	itete	ne
 8002440:	6560      	strne	r0, [r4, #84]	; 0x54
 8002442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800244a:	81a3      	strheq	r3, [r4, #12]
 800244c:	bf18      	it	ne
 800244e:	81a3      	strhne	r3, [r4, #12]
 8002450:	bd10      	pop	{r4, pc}

08002452 <__sclose>:
 8002452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002456:	f000 b813 	b.w	8002480 <_close_r>
	...

0800245c <_write_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	2200      	movs	r2, #0
 8002466:	4d05      	ldr	r5, [pc, #20]	; (800247c <_write_r+0x20>)
 8002468:	602a      	str	r2, [r5, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	f7fe f88d 	bl	800058a <_write>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d102      	bne.n	800247a <_write_r+0x1e>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	b103      	cbz	r3, 800247a <_write_r+0x1e>
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	200000a8 	.word	0x200000a8

08002480 <_close_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	2300      	movs	r3, #0
 8002484:	4d05      	ldr	r5, [pc, #20]	; (800249c <_close_r+0x1c>)
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	602b      	str	r3, [r5, #0]
 800248c:	f7fe f899 	bl	80005c2 <_close>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_close_r+0x1a>
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	b103      	cbz	r3, 800249a <_close_r+0x1a>
 8002498:	6023      	str	r3, [r4, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	200000a8 	.word	0x200000a8

080024a0 <_fstat_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	2300      	movs	r3, #0
 80024a4:	4d06      	ldr	r5, [pc, #24]	; (80024c0 <_fstat_r+0x20>)
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	602b      	str	r3, [r5, #0]
 80024ae:	f7fe f893 	bl	80005d8 <_fstat>
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	d102      	bne.n	80024bc <_fstat_r+0x1c>
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	b103      	cbz	r3, 80024bc <_fstat_r+0x1c>
 80024ba:	6023      	str	r3, [r4, #0]
 80024bc:	bd38      	pop	{r3, r4, r5, pc}
 80024be:	bf00      	nop
 80024c0:	200000a8 	.word	0x200000a8

080024c4 <_isatty_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	2300      	movs	r3, #0
 80024c8:	4d05      	ldr	r5, [pc, #20]	; (80024e0 <_isatty_r+0x1c>)
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	602b      	str	r3, [r5, #0]
 80024d0:	f7fe f891 	bl	80005f6 <_isatty>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_isatty_r+0x1a>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_isatty_r+0x1a>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	200000a8 	.word	0x200000a8

080024e4 <_lseek_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	2200      	movs	r2, #0
 80024ee:	4d05      	ldr	r5, [pc, #20]	; (8002504 <_lseek_r+0x20>)
 80024f0:	602a      	str	r2, [r5, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f7fe f889 	bl	800060a <_lseek>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d102      	bne.n	8002502 <_lseek_r+0x1e>
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	b103      	cbz	r3, 8002502 <_lseek_r+0x1e>
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	200000a8 	.word	0x200000a8

08002508 <_read_r>:
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	4604      	mov	r4, r0
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	2200      	movs	r2, #0
 8002512:	4d05      	ldr	r5, [pc, #20]	; (8002528 <_read_r+0x20>)
 8002514:	602a      	str	r2, [r5, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	f7fe f81a 	bl	8000550 <_read>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d102      	bne.n	8002526 <_read_r+0x1e>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	b103      	cbz	r3, 8002526 <_read_r+0x1e>
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	200000a8 	.word	0x200000a8

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
